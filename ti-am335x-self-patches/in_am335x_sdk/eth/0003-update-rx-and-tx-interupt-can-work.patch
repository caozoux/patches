From 5bf43206e8f5878fd30b24f850e6af35b3ffb654 Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Fri, 29 Sep 2017 15:29:19 +0800
Subject: [PATCH 3/7] update: rx and tx interupt can work

---
 .../net/ethernet/newam335x/newam335x_eth_cpsw.c    | 112 ++++++++++++++++++++-
 .../net/ethernet/newam335x/newam335x_eth_cpsw.h    |   3 +
 drivers/net/ethernet/newam335x/newam335x_mdio.c    |  35 ++++++-
 3 files changed, 147 insertions(+), 3 deletions(-)

diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
index 94d269e..0caf2bf 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
@@ -166,7 +166,9 @@ static int newam335x_eth_init(struct net_device *ndev)
 	u32 val;
 	struct newam335x_eth_priv *priv = (struct newam335x_eth_priv *) netdev_priv(ndev);
 
+	printk("zz %s priv->ss_regs->soft_reset:%08x \n",__func__, (int)&priv->ss_regs->soft_reset);
 	setbit_and_wait_for_clear32(&priv->ss_regs->soft_reset);
+	printk("zz %s priv->ss_regs->soft_reset:%08x \n",__func__, (int)&priv->ss_regs->soft_reset);
 
 	//writel(readl(&priv->ale_regs+CPSW_ALE_CONTROL) & ~(1<<2),
 	//		priv->ale_regs+CPSW_ALE_CONTROL);  /* vlan unaware mode */
@@ -228,15 +230,19 @@ static int cpsw_ndo_open(struct net_device *ndev)
 	struct phy_device *phydev;
 	char phy_id[MII_BUS_ID_SIZE + 3];
 
-	printk("zz %s %d \n", __func__, __LINE__);
+	pm_runtime_get_sync(&priv->pdev->dev);
 
 	newam335x_eth_init(ndev);
 
 	snprintf(phy_id, sizeof(phy_id), PHY_ID_FMT,
 		 "newam335x_mdio", 0);
+#ifndef CONFIG_OF
 	phydev = phy_connect(ndev, phy_id, eth_adjust_link,
 	 			PHY_INTERFACE_MODE_MII);
-
+#else
+	phydev = phy_connect(ndev, priv->phy_id,
+				 &eth_adjust_link, priv->phy_if);
+#endif
 	if (IS_ERR(phydev)) {
 		netdev_err(ndev, "Can not get phy\n");
 		return 1;
@@ -493,6 +499,54 @@ static irqreturn_t rx_intr(int __always_unused irq, void *data)
 	return IRQ_HANDLED;
 }
 
+#define CPSW_MDIO_BASE  	(0x4A101000)
+static struct resource newam335x_mdio_resources[] = {
+	{
+		.start	= CPSW_MDIO_BASE,
+		.end	= CPSW_MDIO_BASE + 0x100,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+
+void phy_node_init(struct newam335x_eth_priv *priv)
+{
+	struct device_node *node = priv->pdev->dev.of_node;
+	struct device_node *slave_node;
+	int i;
+
+	for_each_child_of_node(node, slave_node) {
+		u32 phyid;
+		int lenp;
+		const __be32 *parp;
+		struct device_node *mdio_node;
+		struct platform_device *mdio;
+
+		/* This is no slave child node, continue */
+		if (strcmp(slave_node->name, "slave"))
+			continue;
+
+		printk("zz %s %d \n", __func__, __LINE__);
+		parp = of_get_property(slave_node, "phy_id", &lenp);
+		if ((parp == NULL) || (lenp != (sizeof(void *) * 2))) {
+			dev_err(&priv->pdev->dev, "Missing slave[%d] phy_id property\n", i);
+		}
+		printk("zz %s %d \n", __func__, __LINE__);
+		mdio_node = of_find_node_by_phandle(be32_to_cpup(parp));
+		phyid = be32_to_cpup(parp+1);
+		mdio = of_find_device_by_node(mdio_node);
+		of_node_put(mdio_node);
+		if (!mdio) {
+			dev_err(&priv->pdev->dev, "Missing mdio platform device\n");
+			return ;
+		}
+		snprintf(priv->phy_id, sizeof(priv->phy_id),
+			 PHY_ID_FMT, mdio->name, phyid);
+
+		priv->phy_if = of_get_phy_mode(slave_node);
+		break;
+	}
+}
+
 static int newam335x_eth_probe(struct platform_device *pdev)
 {
 	struct resource *res;
@@ -500,6 +554,11 @@ static int newam335x_eth_probe(struct platform_device *pdev)
 	struct net_device *ndev;
 	int i, ret=0, irq, k=0;
 	void __iomem *base;
+	struct device_node *node = pdev->dev.of_node;
+
+	printk("zz %s %d \n", __func__, __LINE__);
+
+#ifndef CONFIG_OF
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "resource not find");
@@ -549,6 +608,54 @@ static int newam335x_eth_probe(struct platform_device *pdev)
 
 		k++;
 	}
+#else
+#define CPSW_SS_BASE  	(0x4a100000)
+	ndev = alloc_etherdev(sizeof(struct newam335x_eth_priv));
+	priv = netdev_priv(ndev);
+
+	platform_set_drvdata(pdev, ndev);
+
+	memset(priv, 0, sizeof(struct newam335x_eth_priv));
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	base = ioremap(CPSW_SS_BASE, 0x4000);
+	if (!base) {
+		kfree(priv);
+		return -EINVAL;
+	}
+
+	/* RX IRQ */
+	irq = platform_get_irq(pdev, 1);
+	priv->rx_irq = irq;
+	ret = request_irq(irq, rx_intr, 0,
+		  	pdev->name, priv);
+
+	/* TX IRQ */
+	irq = platform_get_irq(pdev, 2);
+	priv->tx_irq = irq;
+	ret = request_irq(irq, tx_intr, 0,
+			pdev->name, priv);
+
+	priv->fck_clk = devm_clk_get(&pdev->dev, "fck");
+	if (IS_ERR(priv->fck_clk)) {
+		dev_err(&priv->pdev->dev, "fck is not found\n");
+		return -ENODEV;
+	}
+
+	clk_enable(priv->fck_clk);
+	pm_runtime_enable(&pdev->dev);
+
+	/* Select default pin state */
+	pinctrl_pm_select_default_state(&pdev->dev);
+
+	ret = of_platform_populate(node, NULL, NULL, &pdev->dev);
+	/* We do not want to force this, as in some cases may not have child */
+	if (ret)
+		dev_warn(&pdev->dev, "Doesn't have any child node\n");
+
+	priv->pdev = pdev;
+	phy_node_init(priv);
+#endif
 
 #define CPSW_SL1_OFFSET 		0xd80
 #define CPSW_SL2_OFFSET 		0xdc0
@@ -612,6 +719,7 @@ static int newam335x_eth_probe(struct platform_device *pdev)
 	/* register the network device */
 	SET_NETDEV_DEV(ndev, &pdev->dev);
 
+
 	ret = register_netdev(ndev);
 	if (ret) {
 		dev_err(&pdev->dev, "error registering net device\n");
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
index 97f6474..4d0157c 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
@@ -153,6 +153,9 @@ struct newam335x_eth_priv {
 	u8 defaut_mac[6];
 	struct transfer_data  package_list[PACKAGE_NUM];
 	struct list_head free_list;
+	struct clk *fck_clk;
+	char phy_id[64];
+	phy_interface_t phy_if;
 };
 
 #define CPPI_RAM_BASE 	(0x4A102000)
diff --git a/drivers/net/ethernet/newam335x/newam335x_mdio.c b/drivers/net/ethernet/newam335x/newam335x_mdio.c
index 04bbdce..50108ac 100644
--- a/drivers/net/ethernet/newam335x/newam335x_mdio.c
+++ b/drivers/net/ethernet/newam335x/newam335x_mdio.c
@@ -5,6 +5,8 @@
 #include <linux/mdio.h>
 #include <linux/timer.h>
 #include <linux/delay.h>
+#include <linux/pm_runtime.h>
+#include <linux/clk.h>
 #include "newam335x_eth_cpsw.h"
 #include "newam335x_mdio.h"
 
@@ -34,6 +36,7 @@ struct newam335x_mdio_priv
 	struct newam335x_mdio_regs *mdio_regs;
 	struct platform_device *pdev;
 	struct device *dev;
+	struct clk *fck_clk;
 };
 
 #define MDIO_REGADDR_MASK (0x1f<<21)
@@ -157,8 +160,10 @@ static int newam335x_mdio_probe(struct platform_device *pdev)
 	void __iomem *base;
 	int ret;
 
+	printk("zz %s %d \n", __func__, __LINE__);
 	priv = kzalloc(sizeof(struct newam335x_mdio_priv), GFP_KERNEL);
 
+#ifndef CONFIG_OF
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
 		dev_err(&pdev->dev, "resource not find");
@@ -170,6 +175,23 @@ static int newam335x_mdio_probe(struct platform_device *pdev)
 		kfree(priv);
 		return -EINVAL;
 	}
+#else
+
+	#define CPSW_MDIO_BASE  	(0x4A101000)
+	base = ioremap(CPSW_MDIO_BASE, 0x100);
+	if (!base) {
+		kfree(priv);
+		return -EINVAL;
+	}
+
+	pm_runtime_enable(&pdev->dev);
+	pm_runtime_get_sync(&pdev->dev);
+	priv->fck_clk = devm_clk_get(&pdev->dev, "fck");
+	if (IS_ERR(priv->fck_clk)) {
+		dev_err(&pdev->dev, "failed to get device clock\n");
+	}
+
+#endif
 
 	priv->mdio_regs = (struct newam335x_mdio_regs*) base;
 	priv->pdev = pdev;
@@ -214,9 +236,19 @@ static int newam335x_mdio_remove(struct platform_device *pdev)
 	return 0;
 }
 
+#if IS_ENABLED(CONFIG_OF)
+static const struct of_device_id davinci_mdio_of_mtable[] = {
+	{ .compatible = "ti,davinci_mdio", },
+	{ /* sentinel */ },
+};
+MODULE_DEVICE_TABLE(of, davinci_mdio_of_mtable);
+#endif
+
 static struct platform_driver newam335x_mdio_driver = {
 	.driver = {
-		.name	 = "newam335x_mdio",
+		//.name	 = "newam335x_mdio",
+		.name	 = "davinci_mdio",
+		.of_match_table = of_match_ptr(davinci_mdio_of_mtable),
 	},
 	.probe = newam335x_mdio_probe,
 	.remove = newam335x_mdio_remove,
@@ -224,6 +256,7 @@ static struct platform_driver newam335x_mdio_driver = {
 
 static int __init newam335x_mdio_init(void)
 {
+	printk("zz %s %d \n", __func__, __LINE__);
 	return platform_driver_register(&newam335x_mdio_driver);
 }
 device_initcall(newam335x_mdio_init);
-- 
1.9.1


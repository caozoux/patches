From 1285a35279a21aa1da2872c51a31ff28f8760b64 Mon Sep 17 00:00:00 2001
From: czou <cao.zou@windriver.com>
Date: Mon, 7 Mar 2016 15:19:50 +0800
Subject: [PATCH 10/26] generic: add generic mdio driver init no test code

Signed-off-by: czou <cao.zou@windriver.com>
---
 arch/arm/configs/generic_defconfig    |   4 +
 arch/arm/mach-generic/board-generic.c |  15 ++
 drivers/net/ethernet/Kconfig          |  14 ++
 drivers/net/ethernet/Makefile         |   3 +
 drivers/net/ethernet/generic_mdio.c   | 306 ++++++++++++++++++++++++++++++++++
 5 files changed, 342 insertions(+)
 create mode 100644 drivers/net/ethernet/generic_mdio.c

diff --git a/arch/arm/configs/generic_defconfig b/arch/arm/configs/generic_defconfig
index cf19c22..1d1d0fa 100644
--- a/arch/arm/configs/generic_defconfig
+++ b/arch/arm/configs/generic_defconfig
@@ -7,3 +7,7 @@ CONFIG_DEBUG_LL=y
 DEBUG_AM33XXUART1=y
 CONFIG_GENERIC_IRQ_CHIP=y
 CONFIG_SERIAL_GENERIC=y
+CONFIG_NET=y
+CONFIG_NETDEVICES=y
+CONFIG_ETHERNET=y
+CONFIG_NET_VENDOR_GENERIC=y
diff --git a/arch/arm/mach-generic/board-generic.c b/arch/arm/mach-generic/board-generic.c
index aa8426b..b6a2002 100644
--- a/arch/arm/mach-generic/board-generic.c
+++ b/arch/arm/mach-generic/board-generic.c
@@ -20,6 +20,7 @@
 #include "plat.h"
 
 #define GENERIC_UART_RESOURCE_BASE 0x44E09000
+#define GENERIC_MDIO_RESOURCE_BASE 0x4A101000
 static struct resource generic_uart_resources[] = {
 	{
 		.start	= GENERIC_UART_RESOURCE_BASE,
@@ -39,6 +40,20 @@ static struct platform_device generic_uart_device = {
 	.resource	= generic_uart_resources,
 };
 
+static struct resource generic_mdio_resources[] = {
+	{
+		.start	= GENERIC_MDIO_RESOURCE_BASE,
+		.end	= GENERIC_MDIO_RESOURCE_BASE+ 0xff,
+		.flags	= IORESOURCE_MEM,
+	},
+};
+static struct platform_device generic_mdio_device = {
+	.name                   = "generic_mdio",
+	.id                     = 0,
+	.num_resources	= ARRAY_SIZE(generic_mdio_resources),
+	.resource	= generic_mdio_resources,
+};
+
 void __init board_generic_init(void)
 {
 	platform_device_register(&generic_uart_device);
diff --git a/drivers/net/ethernet/Kconfig b/drivers/net/ethernet/Kconfig
index 506b024..bc229f2 100644
--- a/drivers/net/ethernet/Kconfig
+++ b/drivers/net/ethernet/Kconfig
@@ -149,6 +149,20 @@ config S6GMAC
 	  To compile this driver as a module, choose M here. The module
 	  will be called s6gmac.
 
+config NET_VENDOR_GENERIC_MDIO
+	tristate "generic mach ethernet mdio support"
+	depends on NET_VENDOR_GENERIC
+
+config NET_VENDOR_GENERIC
+	tristate "generic mach ethernet support"
+	depends on ARCH_GENERIC
+	select PHYLIB
+	select MII
+	select NET_POLL_CONTROLLER
+	select NET_VENDOR_GENERIC_MDIO
+	---help---
+		generic mach ethernet support
+
 source "drivers/net/ethernet/seeq/Kconfig"
 source "drivers/net/ethernet/silan/Kconfig"
 source "drivers/net/ethernet/sis/Kconfig"
diff --git a/drivers/net/ethernet/Makefile b/drivers/net/ethernet/Makefile
index c0b8789..0356666 100644
--- a/drivers/net/ethernet/Makefile
+++ b/drivers/net/ethernet/Makefile
@@ -77,3 +77,6 @@ obj-$(CONFIG_NET_VENDOR_VIA) += via/
 obj-$(CONFIG_NET_VENDOR_WIZNET) += wiznet/
 obj-$(CONFIG_NET_VENDOR_XILINX) += xilinx/
 obj-$(CONFIG_NET_VENDOR_XIRCOM) += xircom/
+obj-$(CONFIG_NET_VENDOR_GENERIC) 	+= generic_net.o
+#obj-$(CONFIG_NET_VENDOR_GENERIC_MDIO) 	+= generic_mdio.o
+obj-y += generic_mdio.o
diff --git a/drivers/net/ethernet/generic_mdio.c b/drivers/net/ethernet/generic_mdio.c
new file mode 100644
index 0000000..a933cbb
--- /dev/null
+++ b/drivers/net/ethernet/generic_mdio.c
@@ -0,0 +1,306 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/platform_device.h>
+#include <linux/delay.h>
+#include <linux/sched.h>
+#include <linux/slab.h>
+#include <linux/phy.h>
+#include <linux/clk.h>
+#include <linux/err.h>
+#include <linux/io.h>
+#include <linux/pm_runtime.h>
+#include <linux/davinci_emac.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/pinctrl/consumer.h>
+
+/*
+ * This timeout definition is a worst-case ultra defensive measure against
+ * unexpected controller lock ups.  Ideally, we should never ever hit this
+ * scenario in practice.
+ */
+#define MDIO_TIMEOUT		100 /* msecs */
+
+#define PHY_REG_MASK		0x1f
+#define PHY_ID_MASK		0x1f
+
+#define DEF_OUT_FREQ		2200000		/* 2.2 MHz */
+
+struct generic_mdio_regs {
+	u32	version;
+	u32	control;
+#define CONTROL_IDLE		BIT(31)
+#define CONTROL_ENABLE		BIT(30)
+#define CONTROL_MAX_DIV		(0xffff)
+
+	u32	alive;
+	u32	link;
+	u32	linkintraw;
+	u32	linkintmasked;
+	u32	__reserved_0[2];
+	u32	userintraw;
+	u32	userintmasked;
+	u32	userintmaskset;
+	u32	userintmaskclr;
+	u32	__reserved_1[20];
+
+	struct {
+		u32	access;
+#define USERACCESS_GO		BIT(31)
+#define USERACCESS_WRITE	BIT(30)
+#define USERACCESS_ACK		BIT(29)
+#define USERACCESS_READ		(0)
+#define USERACCESS_DATA		(0xffff)
+
+		u32	physel;
+	}	user[0];
+};
+
+struct generic_mdio_data {
+	struct mii_bus *bus;
+	struct generic_mdio_regs __iomem *regs;
+	spinlock_t	lock;
+	struct device *dev;
+	unsigned long	access_time; /* jiffies */
+};
+
+/* wait until hardware is ready for another user access */
+static inline int wait_for_user_access(struct generic_mdio_data *data)
+{
+	struct generic_mdio_regs __iomem *regs = data->regs;
+	unsigned long timeout = jiffies + msecs_to_jiffies(MDIO_TIMEOUT);
+	u32 reg;
+
+	while (time_after(timeout, jiffies)) {
+		reg = __raw_readl(&regs->user[0].access);
+		if ((reg & USERACCESS_GO) == 0)
+			return 0;
+
+		reg = __raw_readl(&regs->control);
+		if ((reg & CONTROL_IDLE) == 0)
+			continue;
+
+		/*
+		 * An emac soft_reset may have clobbered the mdio controller's
+		 * state machine.  We need to reset and retry the current
+		 * operation
+		 */
+		dev_warn(data->dev, "resetting idled controller\n");
+		//__davinci_mdio_reset(data);
+		return -EAGAIN;
+	}
+
+	reg = __raw_readl(&regs->user[0].access);
+	if ((reg & USERACCESS_GO) == 0)
+		return 0;
+
+	dev_err(data->dev, "timed out waiting for user access\n");
+	return -ETIMEDOUT;
+}
+
+/* wait until hardware state machine is idle */
+static inline int wait_for_idle(struct generic_mdio_data *data)
+{
+	struct generic_mdio_regs __iomem *regs = data->regs;
+	unsigned long timeout = jiffies + msecs_to_jiffies(MDIO_TIMEOUT);
+
+	while (time_after(timeout, jiffies)) {
+		if (__raw_readl(&regs->control) & CONTROL_IDLE)
+			return 0;
+	}
+	dev_err(data->dev, "timed out waiting for idle\n");
+	return -ETIMEDOUT;
+}
+
+static int generic_mdio_reset(struct mii_bus *bus)
+{
+	struct generic_mdio_data *data = bus->priv;
+	u32 phy_mask, ver;
+
+
+	/* wait for scan logic to settle */
+	msleep(PHY_MAX_ADDR * data->access_time);
+
+	/* dump hardware version info */
+	ver = __raw_readl(&data->regs->version);
+	dev_info(data->dev, "generic mdio revision %d.%d\n",
+		 (ver >> 8) & 0xff, ver & 0xff);
+
+	/* get phy mask from the alive register */
+	phy_mask = __raw_readl(&data->regs->alive);
+	if (phy_mask) {
+		/* restrict mdio bus to live phys only */
+		dev_info(data->dev, "detected phy mask %x\n", ~phy_mask);
+		phy_mask = ~phy_mask;
+	} else {
+		/* desperately scan all phys */
+		dev_warn(data->dev, "no live phy, scanning all\n");
+		phy_mask = 0;
+	}
+	data->bus->phy_mask = phy_mask;
+
+	return 0;
+}
+
+static int generic_mdio_read(struct mii_bus *bus, int phy_id, int phy_reg)
+{
+	struct generic_mdio_data *data = bus->priv;
+	u32 reg;
+	int ret;
+
+	if (phy_reg & ~PHY_REG_MASK || phy_id & ~PHY_ID_MASK)
+		return -EINVAL;
+
+	spin_lock(&data->lock);
+
+	reg = (USERACCESS_GO | USERACCESS_READ | (phy_reg << 21) |
+	       (phy_id << 16));
+
+	while (1) {
+		ret = wait_for_user_access(data);
+		if (ret == -EAGAIN)
+			continue;
+		if (ret < 0)
+			break;
+
+		__raw_writel(reg, &data->regs->user[0].access);
+
+		ret = wait_for_user_access(data);
+		if (ret == -EAGAIN)
+			continue;
+		if (ret < 0)
+			break;
+
+		reg = __raw_readl(&data->regs->user[0].access);
+		ret = (reg & USERACCESS_ACK) ? (reg & USERACCESS_DATA) : -EIO;
+		break;
+	}
+
+	spin_unlock(&data->lock);
+
+	return ret;
+}
+
+static int generic_mdio_write(struct mii_bus *bus, int phy_id, int phy_reg, u16 phy_data)
+{
+	struct generic_mdio_data *data = bus->priv;
+	u32 reg;
+	int ret;
+
+	if (phy_reg & ~PHY_REG_MASK || phy_id & ~PHY_ID_MASK)
+		return -EINVAL;
+
+	spin_lock(&data->lock);
+
+	reg = (USERACCESS_GO | USERACCESS_WRITE | (phy_reg << 21) |
+		   (phy_id << 16) | (phy_data & USERACCESS_DATA));
+
+	while (1) {
+		ret = wait_for_user_access(data);
+		if (ret == -EAGAIN)
+			continue;
+		if (ret < 0)
+			break;
+
+		__raw_writel(reg, &data->regs->user[0].access);
+
+		ret = wait_for_user_access(data);
+		if (ret == -EAGAIN)
+			continue;
+		break;
+	}
+
+	spin_unlock(&data->lock);
+
+	return 0;
+}
+
+static int generic_mdio_probe(struct platform_device *pdev)
+{
+	struct generic_mdio_data *data;
+	struct resource *res;
+	struct phy_device *phy;
+	int ret, addr;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res) {
+		dev_err(&pdev->dev, "no mem resource\n");
+		goto out1;
+	}
+
+	data = kzalloc(sizeof(*data), GFP_KERNEL);
+	if (!data)
+		return -ENOMEM;
+
+	data->regs = devm_ioremap_nocache(&pdev->dev, res->start, resource_size(res));
+	if (!data->regs) {
+		ret = -EIO; 
+		goto  out2;
+	}
+	data->bus = mdiobus_alloc();
+	if (!data->bus) {
+		dev_err(&pdev->dev, "failed to alloc mii bus\n");
+		ret = -ENOMEM;
+		goto out2;
+	}
+
+	data->bus->name		= dev_name(&pdev->dev);
+	data->bus->read		= generic_mdio_read,
+	data->bus->write	= generic_mdio_write,
+	data->bus->reset	= generic_mdio_reset,
+	data->bus->parent	= &pdev->dev;
+	data->bus->priv		= data;
+
+	dev_set_drvdata(&pdev->dev, data);
+	data->dev = &pdev->dev;
+	/* register the mii bus */
+	ret = mdiobus_register(data->bus);
+	if (ret)
+		goto out2;
+
+	for (addr = 0; addr < PHY_MAX_ADDR; addr++) {
+		phy = data->bus->phy_map[addr];
+		if (phy) {
+			dev_info(&pdev->dev, "phy[%d]: device %s, driver %s\n",
+				 phy->addr, dev_name(&phy->dev),
+				 phy->drv ? phy->drv->name : "unknown");
+		}
+	}
+	return 0;
+out1:
+	return -EIO;
+out2:
+	kfree(data);
+	return ret;
+}
+
+static int generic_mdio_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static struct platform_driver generic_mdio_driver = {
+	.driver = {
+		.name	 = "generic_mdio",
+		.owner	 = THIS_MODULE,
+		//.pm	 = &davinci_mdio_pm_ops,
+		//.of_match_table = of_match_ptr(davinci_mdio_of_mtable),
+	},
+	.probe = generic_mdio_probe,
+	.remove = generic_mdio_remove,
+};
+
+static int __init generic_mdio_init(void)
+{
+	return platform_driver_register(&generic_mdio_driver);
+}
+device_initcall(generic_mdio_init);
+
+static void __exit generic_mdio_exit(void)
+{
+	platform_driver_unregister(&generic_mdio_driver);
+}
+module_exit(generic_mdio_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("DaVinci MDIO driver");
-- 
1.9.1


From fc854b7c444e5109b2874a98378ca012cd9f42c2 Mon Sep 17 00:00:00 2001
From: czou <cao.zou@windriver.com>
Date: Wed, 2 Nov 2016 20:40:23 +0800
Subject: [PATCH 21/26] Update: net now can interrupt, now we need to add full
 feature.

Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/net/ethernet/generic_dbg.c      |  69 +++++++
 drivers/net/ethernet/generic_net.c      | 134 +++++++++++++-
 drivers/net/ethernet/generic_net.h      |  85 ++-------
 drivers/net/ethernet/generic_transfer.c | 312 ++++++++++++++++++++++++++------
 4 files changed, 469 insertions(+), 131 deletions(-)

diff --git a/drivers/net/ethernet/generic_dbg.c b/drivers/net/ethernet/generic_dbg.c
index 393140c..e91e093 100644
--- a/drivers/net/ethernet/generic_dbg.c
+++ b/drivers/net/ethernet/generic_dbg.c
@@ -23,6 +23,75 @@
 
 #include "generic_net.h"
 
+#define  TX_IDVER  0x0+CPSW_CPDMA 
+#define  TX_CONTROL  0x4+CPSW_CPDMA  
+#define  TX_TEARDOWN  0x8+CPSW_CPDMA  
+#define  RX_IDVER  0x10+CPSW_CPDMA  
+#define  RX_CONTROL  0x14+CPSW_CPDMA  
+#define  RX_TEARDOWN  0x18+CPSW_CPDMA  
+#define  CPDMA_SOFT_RESET  0x1C+CPSW_CPDMA  
+#define  DMACONTROL  0x20+CPSW_CPDMA  
+#define  DMASTATUS  0x24+CPSW_CPDMA  
+#define  RX_BUFFER_OFFSET  0x28+CPSW_CPDMA  
+#define  EMCONTROL  0x2C+CPSW_CPDMA  
+#define  TX_PRI0_RATE  0x30+CPSW_CPDMA  
+#define  TX_PRI1_RATE  0x34+CPSW_CPDMA  
+#define  TX_PRI2_RATE  0x38+CPSW_CPDMA  
+#define  TX_PRI3_RATE  0x3C+CPSW_CPDMA  
+#define  TX_PRI4_RATE  0x40+CPSW_CPDMA  
+#define  TX_PRI5_RATE  0x44+CPSW_CPDMA  
+#define  TX_PRI6_RATE  0x48+CPSW_CPDMA  
+#define  TX_PRI7_RATE  0x4C+CPSW_CPDMA  
+#define  TX_INTSTAT_RAW  0x80+CPSW_CPDMA  
+#define  TX_INTSTAT_MASKED  0x84+CPSW_CPDMA  
+#define  TX_INTMASK_SET  0x88+CPSW_CPDMA  
+#define  TX_INTMASK_CLEAR  0x8C+CPSW_CPDMA  
+#define  CPDMA_IN_VECTOR  0x90+CPSW_CPDMA  
+#define  RX_INTSTAT_RAW  0xA0+CPSW_CPDMA  
+#define  RX_INTSTAT_MASKED  0xA4+CPSW_CPDMA  
+#define  RX_INTMASK_SET  0xA8+CPSW_CPDMA  
+#define  RX_INTMASK_CLEAR  0xAC+CPSW_CPDMA  
+#define  DMA_INTSTAT_RAW  0xB0+CPSW_CPDMA  
+#define  DMA_INTSTAT_MASKED  0xB4+CPSW_CPDMA  
+#define  DMA_INTMASK_SET  0xB8+CPSW_CPDMA  
+#define  DMA_INTMASK_CLEAR  0xBC+CPSW_CPDMA  
+#define  RX0_PENDTHRESH  0xC0+CPSW_CPDMA  
+//#define CPSW_STATS    0x4A100900
+#define  Good_RX_FRAME  0x00+CPSW_STATS 
+#define  Broadcast_RX_FRAME  0x04+CPSW_STATS  
+#define  Multicast_RX_FRAME    0x08+CPSW_STATS  
+#define  Pause_RX_FRAME    0x0C+CPSW_STATS  
+#define  Rx_CRC_ERR  0x10+CPSW_STATS  
+#define  Rx_ALIGN_ERR  0x14+CPSW_STATS  
+#define  Oversize_RX_FRAME      0x18+CPSW_STATS  
+#define  Rx_JAB  0x1C+CPSW_STATS  
+#define  Undersize_RX_FRAME      0x20+CPSW_STATS  
+#define  Rx_FRAG  0x24+CPSW_STATS  
+#define  Rx_OCT  0x30+CPSW_STATS  
+#define  Good_TX_FRAME  0x34+CPSW_STATS  
+#define  Broadcast_TX_FRAME    0x38+CPSW_STATS  
+#define  Multicast_TX_FRAME    0x3C+CPSW_STATS  
+#define  Pause_TX_FRAME    0x40+CPSW_STATS  
+#define  Deferred_TX_FRAME    0x44+CPSW_STATS  
+#define  Collisions_TX  0x48+CPSW_STATS  
+#define  Single_TX  0x4C+CPSW_STATS  
+#define  Multiple_COL_TX  0x50+CPSW_STATS  
+#define  Excessive_COL  0x54+CPSW_STATS  
+#define  Late_COL  0x58+CPSW_STATS  
+#define  Tx_UNDER 0x5C+CPSW_STATS  
+#define  Carrier_SEN  0x60+CPSW_STATS  
+#define  Tx_COT  0x64+CPSW_STATS  
+#define  Rx_TX_64  0x68+CPSW_STATS  
+#define  Rx_TX_128  0x6C+CPSW_STATS  
+#define  Rx_TX_255  0x70+CPSW_STATS  
+#define  Rx_TX_511  0x74+CPSW_STATS  
+#define  Rx_TX_512  0x78+CPSW_STATS  
+#define  Rx_TX_1024  0x7C+CPSW_STATS  
+#define  Net_OCT  0x80+CPSW_STATS  
+#define  Rx_S_FRAM  0x84+CPSW_STATS  
+#define  Rx_M_FRAM  0x88+CPSW_STATS  
+#define  Rx_DMA_OVE  0x8C+CPSW_STATS
+#define  CPDMA_EOI_VECTOR 0x94+CPSW_STATS
 void dump_cpsw_regs(void __iomem *base)
 {
 #if 0
diff --git a/drivers/net/ethernet/generic_net.c b/drivers/net/ethernet/generic_net.c
index e4954d5..0f493fd 100644
--- a/drivers/net/ethernet/generic_net.c
+++ b/drivers/net/ethernet/generic_net.c
@@ -20,9 +20,15 @@
 #include <linux/if_vlan.h>
 #include <linux/net_switch_config.h>
 #include <linux/pinctrl/consumer.h>
+#include <linux/generic_dbg.h>
+#include <linux/netdevice.h>
+#include <net/busy_poll.h>
+#include <linux/pinctrl/consumer.h>
+#include <linux/if_ether.h>
 
 #include "generic_net.h"
 
+#define napi_tx_to_priv(napi)	container_of(napi, struct gen_net_data, napi_tx)
 #define  MAX_ALE_ENTRY (1024)
 #define PKT_MAX			(1500 + 14 + 4 + 4)
 
@@ -66,6 +72,8 @@ static void cpsw_set_slave_mac(struct gen_net_data *pdata, int port, u8 *mac_add
 {
 	struct cpsw_port_slave_regs __iomem *slave_regs;
 	slave_regs = (struct cpsw_port_slave_regs*)pdata->port_regs + port*0x100;
+	printk(" lave_regs->sa_hi:%08x \n"  ,(u32)slave_regs->sa_hi);
+	printk(" lave_regs->sa_lo:%08x \n"  ,(u32)slave_regs->sa_lo);
 	__raw_writel(mac_hi(mac_addr), &slave_regs->sa_hi);
 	__raw_writel(mac_lo(mac_addr), &slave_regs->sa_lo);
 }
@@ -73,7 +81,8 @@ static void cpsw_set_slave_mac(struct gen_net_data *pdata, int port, u8 *mac_add
 static void cpsw_slave_init(struct gen_net_data *pdata, int port)
 {
 	struct cpsw_port_slave_regs * slave_port;
-	u8 mac_addr[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
+	//u8 mac_addr[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
+	u8 mac_addr[6] = {0x78, 0xa5,0x04, 0xed, 0xd9, 0xe6};
 	slave_port = (struct cpsw_port_slave_regs*) ((void *)pdata->port_regs + port*0x100);
 	gen_cpsw_reset(&pdata->slive_regs->soft_reset);
 	/* setup priority mapping */
@@ -100,7 +109,7 @@ void phy_init(struct gen_net_data *pdata)
 
 }
 
-#define ALE_CONTROL (0x08)
+//#define ALE_CONTROL (0x08)
 static inline void cpsw_ale_control(struct gen_net_data *pdata, int bit, int val)
 {
 	u32 tmp, mask = BIT(bit);
@@ -118,6 +127,7 @@ static inline void cpsw_ale_control(struct gen_net_data *pdata, int bit, int val
 static void gen_cpsw_control_init(struct net_device *ndev)
 {
 	struct gen_net_data *pdata = netdev_priv(ndev);
+
 	u8 mac_addr[6] = {0x98,0x90,0x96,0xc0,0xbe,0xc0};
 	u8 bmac_addr[6] = {0xff,0xff,0xff,0xff,0xff,0xff};
 
@@ -137,7 +147,11 @@ static void gen_cpsw_control_init(struct net_device *ndev)
 	__raw_writel(0, &pdata->regs->ptype);
 
 	#define ALE_PORT_STATE_FORWARD (0x03)
+#if 0
 	__raw_writel(BIT(1), &pdata->regs->stat_port_en);
+#else
+	__raw_writel(7, &pdata->regs->stat_port_en);
+#endif
 	cpsw_ale_port_state(pdata->ale_regs, 1, ALE_PORT_STATE_FORWARD);
 
 	//init the entry table
@@ -145,6 +159,20 @@ static void gen_cpsw_control_init(struct net_device *ndev)
 	cpsw_ale_add_mcast(pdata->ale_regs, bmac_addr, 1);
 
 	cpsw_slave_init(pdata, 1);
+	//STAT_PORT_EN enable all port
+	//__raw_writel(0x7, pdata->regs+ 0x0C);
+	//FLOW_CONTROL enable port
+	//__raw_writel(0x7, pdata->regs+ 0x24);
+
+#if 0
+	//enable tx rx interrupt
+	__raw_writel(0x01, &pdata->wr_regs->tx_en);
+	__raw_writel(0x01, &pdata->wr_regs->rx_en);
+	//__raw_writel(0x1, &pdata->wr_regs->rx_imax);
+	//__raw_writel(0x1, &pdata->wr_regs->tx_imax);
+	__raw_writel((0x3f<<16)|0xff, &pdata->wr_regs->int_control);
+#endif
+
 }
 
 void gen_phy_adjust_link(struct net_device *ndev)
@@ -164,9 +192,9 @@ void gen_phy_adjust_link(struct net_device *ndev)
 }
 
 #define FIFO_LOOPBACK_ENABLE (1)
-static fifo_loopback_test(struct gen_net_data *pdata)
+static void fifo_loopback_test(struct gen_net_data *pdata)
 {
-	__raw_writel(FIFO_LOOPBACK_ENABLE, &pdata->regs->control);
+	//__raw_writel(FIFO_LOOPBACK_ENABLE, &pdata->regs->control);
 	gen_tran_test(pdata);
 	while(1);
 }
@@ -197,8 +225,10 @@ static int cpsw_ndo_open(struct net_device *ndev)
 	/* Bring the PHY up */
 	phy_start(pdata->phydev);
 	gen_cppi_init(pdata, 0x4a100000);
-	fifo_loopback_test(pdata);
+	//fifo_loopback_test(pdata);
 
+	//napi_enable(&pdata->napi);
+	napi_enable(&pdata->napi_tx);
 	return 0;
 }
 
@@ -212,9 +242,8 @@ static int cpsw_ndo_start_xmit (struct sk_buff *skb,
 						   struct net_device *ndev)
 {
 	struct gen_net_data *pdata = netdev_priv(ndev);
-	printk("zz %s \n", __func__);
 
-	dump_cpsw_regs(pdata->base);
+	gen_submit_data(pdata, skb->data, skb->len);
 	return NETDEV_TX_OK;
 }
 
@@ -336,11 +365,67 @@ const struct ethtool_ops generic_netdev_tool = {
 	.set_ringparam  = gen_set_ringparam,
 };
 
+#if 0
+static void cpdma_ctlr_eoi(struct gen_net_data *pdata)
+{
+	printk("mask %08x\n", __raw_readl((u32)pdata->base+CPSW_CPDMA+0x84));
+	printk("pend %08x\n", __raw_readl((u32)pdata->base+CPSW_CPDMA+0x80));
+	__raw_writel(2, (u32)pdata->base+CPSW_CPDMA+CPDMA_EOI_VECTOR);
+	//__raw_writel(0xf, (u32)pdata->base+CPSW_CPDMA+0x84);
+	__raw_writel(0xf, (u32)pdata->base+CPSW_CPDMA+0x8c);
+	printk("pend %08x\n", __raw_readl((u32)pdata->base+CPSW_CPDMA+0x80));
+	printk("mask %08x\n", __raw_readl((u32)pdata->base+CPSW_CPDMA+0x84));
+}
+#endif
+
+static irqreturn_t gen_intr(int __always_unused irq, void *data)
+{
+	printk("zz %s \n", __func__);
+	return IRQ_HANDLED;
+}
+
+static irqreturn_t gen_tx_intr(int __always_unused irq, void *data)
+{
+	struct gen_net_data *pdata = (struct gen_net_data *)data;
+
+#if 0
+	__raw_writel(0, &pdata->wr_regs->tx_en);
+	disable_irq_nosync(irq);
+	if (netif_running(pdata->ndev)) {
+		napi_schedule(&pdata->napi_tx);
+		return IRQ_HANDLED;
+	}
+#else
+	cpdma_ctlr_eoi(pdata);
+	proccess_dma_chan(pdata);
+	//gen_cppi_irq_ctrl(pdata, 0);
+	//generic_irq_dump();
+	//disable_irq_nosync(irq);
+#endif
+	return IRQ_NONE;
+}
+
+static int cpsw_tx_poll(struct napi_struct *napi, int budget)
+{
+	struct gen_net_data *pdata= napi_tx_to_priv(napi);
+	int			num_tx;
+
+	num_tx = 1;
+	gen_proccess_queue(pdata, DMA_TO_DEVICE);
+	__raw_writel(0xff, &pdata->wr_regs->tx_en);
+	cpdma_ctlr_eoi(pdata);
+	napi_complete(napi);
+	enable_irq(pdata->tx_irq);
+	return num_tx;
+}
+
 static int generic_net_probe(struct platform_device *pdev)
 {
 	struct net_device		*ndev;
 	struct gen_net_data *g_data;
-	int ret;
+	int ret, irq;
+	struct resource * res;
+	int k;
 
 	ndev = alloc_etherdev(sizeof(struct net_device));
 	if (!ndev) {
@@ -349,6 +434,30 @@ static int generic_net_probe(struct platform_device *pdev)
 	}
 
 	g_data = netdev_priv(ndev);
+
+	k= 0;
+	while ((res = platform_get_resource(pdev, IORESOURCE_IRQ, k))) {
+
+		irq = res->start;
+#if 0
+		if (k==2) {
+			ret = request_irq(irq, gen_tx_intr, 0,
+				  	pdev->name, g_data);
+			g_data->tx_irq = irq;
+		} else {
+			ret = request_irq(irq, gen_intr, 0,
+				  	pdev->name, g_data);
+		}
+
+		if(ret){
+			dev_err(&pdev->dev, "can't register irq %d\n", irq);
+			return 1;
+		}
+#endif
+		dev_info(&pdev->dev, "irq %d register\n", irq);
+		k++;
+	}
+
 	ndev->netdev_ops = &cpsw_netdev_ops;
 	//netif_napi_add(ndev, &priv->napi, cpsw_poll, CPSW_POLL_WEIGHT);
 	//netif_napi_add(ndev, &priv->napi_tx, cpsw_tx_poll, CPSW_POLL_WEIGHT);
@@ -358,7 +467,7 @@ static int generic_net_probe(struct platform_device *pdev)
 	eth_hw_addr_random(ndev);
 
 	g_data->base = ioremap(0x4a100000, CPSW_SIZE);
-	//g_data->base = ioremap(CPSW_BASE, 0x3000);
+
 	if (!g_data->base) {
 		dev_err(&pdev->dev, "map device resource failed\n");
 		return -EIO;
@@ -370,11 +479,16 @@ static int generic_net_probe(struct platform_device *pdev)
 	g_data->port_regs= g_data->base+CPSW_PORT;
 	g_data->slive_regs= g_data->base+CPSW_SL1;
 	g_data->ale_entries = MAX_ALE_ENTRY;
+	g_data->cpts_regs = g_data->base+CPSW_CPTS;
 	g_data->ndev = ndev;
 	g_data->pdev = pdev;
 
-	ret = register_netdev(ndev);
+#define CPSW_POLL_WEIGHT	64
+	//netif_napi_add(ndev, &g_data->napi, cpsw_poll, CPSW_POLL_WEIGHT);
+	netif_napi_add(ndev, &g_data->napi_tx, cpsw_tx_poll,
+		       CPSW_POLL_WEIGHT);
 
+	ret = register_netdev(ndev);
 	if (ret) {
 		dev_err(&pdev->dev, "error registering net device\n");
 		return -ENODEV;
diff --git a/drivers/net/ethernet/generic_net.h b/drivers/net/ethernet/generic_net.h
index b758800..ae01de4 100644
--- a/drivers/net/ethernet/generic_net.h
+++ b/drivers/net/ethernet/generic_net.h
@@ -1,5 +1,6 @@
 #ifndef _GENERIC_NET_H_
 #define _GENERIC_NET_H_
+#include <linux/netdevice.h>
 
 struct generic_mdio_data {
 	struct mii_bus *bus;
@@ -104,6 +105,11 @@ struct cpsw_slive_regs
 	u32 rx_pri_map;
 };
 
+struct cpsw_cpts_regs {
+    u32 id_ver;
+    u32 control;
+};
+
 struct gen_net_data
 {
 	void __iomem *base;
@@ -112,11 +118,16 @@ struct gen_net_data
 	struct cpsw_slive_regs __iomem *slive_regs;
 	struct cpsw_port_regs __iomem  *port_regs;
 	struct cpsw_ale_regs  __iomem *ale_regs;
+	struct cpsw_cpts_regs __iomem *cpts_regs;
+	struct napi_struct 		napi;
+	struct napi_struct 		napi_tx;
 	u32 ale_entries;
 
 	struct platform_device		*pdev;
 	struct net_device		*ndev;
 	struct phy_device *phydev;
+	u32 tx_irq;
+	u32 rx_irq;
 };
 
 extern struct generic_mdio_data *gen_mdio_data;
@@ -130,6 +141,11 @@ int gen_cppi_init(struct gen_net_data *pdata, u32 phy_addr);
 void gen_cpsw_rx_poll(struct gen_net_data *pdata);
 void gen_cppi_dump(struct gen_net_data *pdata);
 void gen_tran_test(struct gen_net_data *pdata);
+void gen_cppi_irq_ctrl(struct gen_net_data *pdata, u32 enable);
+void cpdma_ctlr_eoi(struct gen_net_data *pdata);
+void proccess_dma_chan(struct gen_net_data *pdata);
+int gen_proccess_queue(struct gen_net_data *pdata, int directory);
+int gen_submit_data(struct gen_net_data *pdata, void *buf, int size);
 
 #define CPSW_BASE 	  0x4A100000
 #define CPSW_SIZE 	  0x3000
@@ -183,75 +199,6 @@ void gen_tran_test(struct gen_net_data *pdata);
 #define  P1_BLK_CNT  0x10C+CPSW_PORT  
 #define  P1_TX_IN_CTL  0x110+CPSW_PORT  
 //#define CPSW_CPDMA    0x4A100800
-#define  TX_IDVER  0x0+CPSW_CPDMA 
-#define  TX_CONTROL  0x4+CPSW_CPDMA  
-#define  TX_TEARDOWN  0x8+CPSW_CPDMA  
-#define  RX_IDVER  0x10+CPSW_CPDMA  
-#define  RX_CONTROL  0x14+CPSW_CPDMA  
-#define  RX_TEARDOWN  0x18+CPSW_CPDMA  
-#define  CPDMA_SOFT_RESET  0x1C+CPSW_CPDMA  
-#define  DMACONTROL  0x20+CPSW_CPDMA  
-#define  DMASTATUS  0x24+CPSW_CPDMA  
-#define  RX_BUFFER_OFFSET  0x28+CPSW_CPDMA  
-#define  EMCONTROL  0x2C+CPSW_CPDMA  
-#define  TX_PRI0_RATE  0x30+CPSW_CPDMA  
-#define  TX_PRI1_RATE  0x34+CPSW_CPDMA  
-#define  TX_PRI2_RATE  0x38+CPSW_CPDMA  
-#define  TX_PRI3_RATE  0x3C+CPSW_CPDMA  
-#define  TX_PRI4_RATE  0x40+CPSW_CPDMA  
-#define  TX_PRI5_RATE  0x44+CPSW_CPDMA  
-#define  TX_PRI6_RATE  0x48+CPSW_CPDMA  
-#define  TX_PRI7_RATE  0x4C+CPSW_CPDMA  
-#define  TX_INTSTAT_RAW  0x80+CPSW_CPDMA  
-#define  TX_INTSTAT_MASKED  0x84+CPSW_CPDMA  
-#define  TX_INTMASK_SET  0x88+CPSW_CPDMA  
-#define  TX_INTMASK_CLEAR  0x8C+CPSW_CPDMA  
-#define  CPDMA_IN_VECTOR  0x90+CPSW_CPDMA  
-#define  CPDMA_EOI_VECTOR  0x94+CPSW_CPDMA  
-#define  RX_INTSTAT_RAW  0xA0+CPSW_CPDMA  
-#define  RX_INTSTAT_MASKED  0xA4+CPSW_CPDMA  
-#define  RX_INTMASK_SET  0xA8+CPSW_CPDMA  
-#define  RX_INTMASK_CLEAR  0xAC+CPSW_CPDMA  
-#define  DMA_INTSTAT_RAW  0xB0+CPSW_CPDMA  
-#define  DMA_INTSTAT_MASKED  0xB4+CPSW_CPDMA  
-#define  DMA_INTMASK_SET  0xB8+CPSW_CPDMA  
-#define  DMA_INTMASK_CLEAR  0xBC+CPSW_CPDMA  
-#define  RX0_PENDTHRESH  0xC0+CPSW_CPDMA  
-//#define CPSW_STATS    0x4A100900
-#define  Good_RX_FRAME  0x00+CPSW_STATS 
-#define  Broadcast_RX_FRAME  0x04+CPSW_STATS  
-#define  Multicast_RX_FRAME    0x08+CPSW_STATS  
-#define  Pause_RX_FRAME    0x0C+CPSW_STATS  
-#define  Rx_CRC_ERR  0x10+CPSW_STATS  
-#define  Rx_ALIGN_ERR  0x14+CPSW_STATS  
-#define  Oversize_RX_FRAME      0x18+CPSW_STATS  
-#define  Rx_JAB  0x1C+CPSW_STATS  
-#define  Undersize_RX_FRAME      0x20+CPSW_STATS  
-#define  Rx_FRAG  0x24+CPSW_STATS  
-#define  Rx_OCT  0x30+CPSW_STATS  
-#define  Good_TX_FRAME  0x34+CPSW_STATS  
-#define  Broadcast_TX_FRAME    0x38+CPSW_STATS  
-#define  Multicast_TX_FRAME    0x3C+CPSW_STATS  
-#define  Pause_TX_FRAME    0x40+CPSW_STATS  
-#define  Deferred_TX_FRAME    0x44+CPSW_STATS  
-#define  Collisions_TX  0x48+CPSW_STATS  
-#define  Single_TX  0x4C+CPSW_STATS  
-#define  Multiple_COL_TX  0x50+CPSW_STATS  
-#define  Excessive_COL  0x54+CPSW_STATS  
-#define  Late_COL  0x58+CPSW_STATS  
-#define  Tx_UNDER 0x5C+CPSW_STATS  
-#define  Carrier_SEN  0x60+CPSW_STATS  
-#define  Tx_COT  0x64+CPSW_STATS  
-#define  Rx_TX_64  0x68+CPSW_STATS  
-#define  Rx_TX_128  0x6C+CPSW_STATS  
-#define  Rx_TX_255  0x70+CPSW_STATS  
-#define  Rx_TX_511  0x74+CPSW_STATS  
-#define  Rx_TX_512  0x78+CPSW_STATS  
-#define  Rx_TX_1024  0x7C+CPSW_STATS  
-#define  Net_OCT  0x80+CPSW_STATS  
-#define  Rx_S_FRAM  0x84+CPSW_STATS  
-#define  Rx_M_FRAM  0x88+CPSW_STATS  
-#define  Rx_DMA_OVE  0x8C+CPSW_STATS  
 //#define CPSW_STATERAM 0x4A100A00
 #define  TX0_HDP  0x00+CPSW_STATERAM 
 #define  TX1_HDP  0x04+CPSW_STATERAM  
diff --git a/drivers/net/ethernet/generic_transfer.c b/drivers/net/ethernet/generic_transfer.c
index 4389abb..e601eab 100644
--- a/drivers/net/ethernet/generic_transfer.c
+++ b/drivers/net/ethernet/generic_transfer.c
@@ -20,9 +20,13 @@
 #include <linux/if_vlan.h>
 #include <linux/net_switch_config.h>
 #include <linux/pinctrl/consumer.h>
+#include <linux/generic_dbg.h>
 
 #include "generic_net.h"
 
+#define DBG(fmt,arg...) do {printk(fmt,##arg);}while(0)
+#define INFO(fmt,arg...) do {printk(fmt,##arg);}while(0)
+#define ERR(fmt,arg...) do {printk(fmt,##arg);}while(0)
 /* DMA Registers */
 #define CPDMA_TXCONTROL		0x004
 //transfer dma index
@@ -36,6 +40,11 @@
 #define CPDMA_TX_INTSTAT_MASK      0x084
 #define CPDMA_TX_INTSTAT_SET       0x088
 #define CPDMA_TX_INTSTAT_CLEAR     0x08c
+/*DMA RX init regs*/
+#define CPDMA_RX_INTSTAT_RAW	0x0A0
+#define CPDMA_RX_INTSTAT_MASK      0x0A4
+#define CPDMA_RX_INTSTAT_SET       0x0A8
+#define CPDMA_RX_INTSTAT_CLEAR     0x0Ac
 /*DMA  init regs*/
 #define CPDMA_NTSTAT_RAW	0x0b0
 #define CPDMA_NTSTAT_MASK      0x0b4
@@ -51,6 +60,7 @@
 #define CPDMA_TXCP_VER2		0x240
 #define CPDMA_RXCP_VER1		0x160
 #define CPDMA_RXCP_VER2		0x260
+#define CPDMA_EOI_VECTOR    0x94
 
 /* Descriptor mode bits */
 #define CPDMA_DESC_SOP		BIT(31)
@@ -67,6 +77,7 @@
 #define RAM_REGS_OFF (0x2000)
 #define RAM_REGS_SIZE (0x2000)
 
+#define DMA_CHAN_NUM (8)
 struct gen_cpsw_cppi_des {
 	/* hardware fields */
 	u32			hw_next;
@@ -78,6 +89,15 @@ struct gen_cpsw_cppi_des {
 	u32			sw_len;
 };
 
+/*
+ * it save the hw dma channel
+ * data
+ */
+struct hw_chan_list {
+	struct gen_cpsw_cppi_des *dma_chan_desc;
+	struct list_head list;	
+};
+
 struct gen_tran_pool {
 	void * __iomem  cpsw_addr;
 	void * __iomem  base;
@@ -90,18 +110,18 @@ struct gen_tran_pool {
 	struct net_device		*ndev;
 
 	u32 num_desc;
+	spinlock_t *lock;
+	struct list_head rx_list;	
+	//struct list_head tx_list;
+	struct list_head tx_list;	
 };
 
-struct gen_cppi_data {
-	struct list_head *rx_list;	
-	struct list_head *tx_list;	
-};
-
-static struct gen_cppi_data * gen_cppi_d;
 
 struct gen_tran_pool * g_tran_pool;
 void gen_cpsw_fill_desc(struct gen_tran_pool *pool, struct gen_cpsw_cppi_des *chan_desc, void *buffer, int len, dma_addr_t dma_buf);
 struct gen_cpsw_cppi_des *gen_cpsw_pool_alloc(struct gen_tran_pool *pool, int size);
+static void gen_dbg_process(struct gen_net_data *pdata, struct gen_cpsw_cppi_des *desc);
+static void gen_dbg_clear_pend(struct gen_net_data *pdata);
 
 static void gen_cpsw_write(u32 value, u32 reg)
 {
@@ -121,6 +141,14 @@ void *desc_to_phy(struct gen_cpsw_cppi_des *des)
 	return (void*)g_tran_pool->phy_addr+((void*)des - (void*)g_tran_pool->cppi_ram_addr);
 }
 
+/*
+ * get the phy address of des
+ */
+struct gen_cpsw_cppi_des *phy_to_desc(dma_addr_t phy_addr)
+{
+	return (struct gen_cpsw_cppi_des *)((void*)phy_addr-(void*)g_tran_pool->phy_addr+ (void*)g_tran_pool->cppi_ram_addr);
+}
+
 void dbg_dump_cppi_ram(void)
 {
 	void * __iomem addr;
@@ -131,31 +159,66 @@ void dbg_dump_cppi_ram(void)
 	}
 }
 
+static void dbg_dump_desc(struct gen_cpsw_cppi_des *desc)
+{
+	printk("desc:%08x phy:%08x hw_mode:%08x buf pointer:%08x buf next:%08x\n"
+			,(u32)desc
+			,(u32)desc_to_phy(desc)
+			,(u32)__raw_readl(&desc->hw_mode)
+			,(u32)__raw_readl(&desc->hw_buffer)
+			,(u32)__raw_readl(&desc->hw_next));
+}
+
+static void dbg_dump_list(struct list_head *list)
+{
+	printk("list:%08x next:%08x prev:%08x\n"
+			,(u32) list
+			,(u32) list->next
+			,(u32) list->prev);
+}
+
+static void dbg_dump_dma(void)
+{
+	 printk("pend:%08x mask:%08x status:%08x\n"
+		   ,gen_cpsw_read(CPDMA_TX_INTSTAT_RAW)
+		   ,gen_cpsw_read(CPDMA_TX_INTSTAT_MASK)
+		   ,gen_cpsw_read(CPDMA_STATUS)
+		   );
+}
+
 static struct gen_cpsw_cppi_des* gen_cpdma_alloc_desc(struct gen_tran_pool *pool)
 {
 	struct gen_cpsw_cppi_des *desc;
 	u32 index;
+	unsigned long flags;
+
+	spin_lock_irqsave(pool->lock, flags);
+
 	index = find_first_zero_bit(pool->bitmap,MAX_TRAN_POOL_NUMBER);
 	bitmap_fill(pool->bitmap, index);
 	desc = (struct gen_cpsw_cppi_des *)(pool->cppi_ram_addr+sizeof(struct gen_cpsw_cppi_des)*index);
-	desc = g_tran_pool->cppi_ram_addr;
+
+	spin_unlock_irqrestore(pool->lock, flags);
+
+	DBG("alloc desc:%08x phy:%08x index:%d\n", (u32)desc, (u32)desc_to_phy(desc), index);
 	return desc;
 }
 
-static void * gen_cpdma_free_desc(struct gen_tran_pool *pool, struct gen_cpsw_cppi_des* desc)
+static void gen_cpdma_free_desc(struct gen_net_data *pdata, struct gen_cpsw_cppi_des* desc)
 {
 	u32 index;
-	index = ((void*)desc-pool->cppi_ram_addr)/sizeof(struct gen_cpsw_cppi_des);
-	if (index >= MAX_TRAN_POOL_NUMBER) {
+	index = ((u32)desc-(u32)g_tran_pool->cppi_ram_addr)/sizeof(struct gen_cpsw_cppi_des);
+	DBG("free desc:%08x phy:%08x index:%d\n", (u32)desc, (u32)desc_to_phy(desc), index);
+	if (index > MAX_TRAN_POOL_NUMBER) {
 		return ;
 	}
-	bitmap_clear(pool->bitmap,0,index);
+	bitmap_clear(g_tran_pool->bitmap,0,index);
 }
 
 static void setbit_and_wait_for_clear32(void * offset)
 {
 	unsigned long jiffies_timeout;
-	u32 max_wait = jiffies + 0x80;
+	jiffies_timeout = jiffies + 0x80;
 	__raw_writel(0x01, offset);
 	while(!time_after(jiffies, jiffies_timeout)) {
 		if (!__raw_readl(offset)) {
@@ -165,7 +228,6 @@ static void setbit_and_wait_for_clear32(void * offset)
 		msleep(10);
 	}
 	printk("cpdma reset failed\n");
-	
 }
 
 void gen_dma_control_init(void * __iomem dma_regs)
@@ -182,67 +244,78 @@ void gen_dma_control_init(void * __iomem dma_regs)
 		__raw_writel(0, dma_regs + CPDMA_TXCP_VER2 + 4*i);
 	}
 
+	__raw_writel(0xf, dma_regs + CPDMA_TX_INTSTAT_SET);
+	//__raw_writel(0x1, dma_regs + CPDMA_NTSTAT_SET);
     __raw_writel(1, dma_regs + CPDMA_TXCONTROL);
 	__raw_writel(1, dma_regs + CPDMA_RXCONTROL);
-}
-
-#define CPPI_RAM (0x4a102000)
-void gen_cpsw_crtl_pool_init(struct gen_net_data *pdata)
-{
-	struct gen_tran_pool *pool;
 
-	pool = kmalloc(sizeof(struct gen_tran_pool), GFP_KERNEL);
-	pool->base = (void*)pdata->regs;
-	pool->cpsw_addr = pdata->regs;
-	pool->dma_regs = pdata->base+ DMA_REGS_OFF;
-	pool->cppi_ram_addr= pdata->base + RAM_REGS_OFF;
-	pool->phy_addr = CPPI_RAM;
-	pool->bitmap = kzalloc(MAX_TRAN_RAM_SIZE, GFP_KERNEL);
-	pool->num_desc = MAX_TRAN_RAM_SIZE;
-	pool->pdev = pdata->pdev;
-	pool->ndev = pdata->ndev;
-
-	g_tran_pool = pool;
 }
 
-int gen_cppi_init(struct gen_net_data *pdata, u32 phy_addr)
+void gen_cppi_irq_ctrl(struct gen_net_data *pdata, u32 enable)
 {
-	gen_cpsw_crtl_pool_init(pdata);
-	gen_dma_control_init(g_tran_pool->dma_regs);
-	return 0;
+	void * __iomem dma_regs;
+	dma_regs = pdata->base + DMA_REGS_OFF;
+	if (enable) {
+		
+	} else {
+		//__raw_writel(0xf, dma_regs + CPDMA_TX_INTSTAT_SET);
+		//__raw_writel(0x1, dma_regs + CPDMA_NTSTAT_SET);
+	}
 }
 
-int gen_submit_dma(struct gen_net_data *pdata,  struct gen_cpsw_cppi_des *desc)
+void cpdma_ctlr_eoi(struct gen_net_data *pdata)
 {
-	printk("dma status:%08x pending:%08x\n", gen_cpsw_read(CPDMA_STATUS)
-			,gen_cpsw_read(CPDMA_TX_INTSTAT_RAW));
-	printk(" desc:%08x phy:%08x\n", (u32)desc, desc_to_phy(desc));
-	__raw_writel(desc_to_phy(desc), g_tran_pool->dma_regs+CPDMA_TXHDP_VER2);
-	msleep(10);
-	printk("dma status:%08x pending:%08x\n", gen_cpsw_read(CPDMA_STATUS)
-			,gen_cpsw_read(CPDMA_TX_INTSTAT_RAW));
+	 writel(0, &pdata->wr_regs->tx_en);
+	 gen_cpsw_write(2,CPDMA_EOI_VECTOR);
 }
 
-int gen_cppi_desc_fill(struct gen_cpsw_cppi_des *des, void *buf, void * dma_addr, int len)
+int gen_submit_dma(struct gen_net_data *pdata,  struct gen_cpsw_cppi_des *desc)
 {
-	__raw_writel(0, &des->hw_next);
-	__raw_writel(len, &des->hw_len);
-	__raw_writel(buf, &des->sw_buffer);
-	__raw_writel(len, &des->sw_len);
-	__raw_writel(dma_addr, &des->hw_buffer);
-	__raw_writel(DMA_CTRL_SOF|DMA_CTRL_EOP|DMA_CTRL_OWN|DMA_CTRL_PORT|DMA_CTRL_EN_PORT1 | len, &des->hw_mode);
+	//gen_cpsw_write(0xff,CPDMA_TX_INTSTAT_CLEAR);
+	//gen_cpsw_write(0xff,CPDMA_TX_INTSTAT_SET);
+	//writel(1, &pdata->wr_regs->tx_en);
+	//writel(5, &pdata->wr_regs->control);
+	__raw_writel((u32)desc_to_phy(desc), g_tran_pool->dma_regs+CPDMA_TXHDP_VER2);
+
+	printk("zz %s wr ctrl:%08x\n", __func__, __raw_readl(&pdata->wr_regs->control));
+
+	msleep(1);
+	__raw_writel((u32)desc_to_phy(desc), g_tran_pool->dma_regs+CPDMA_TXCP_VER2);
+	__raw_writel(0, g_tran_pool->dma_regs+CPDMA_TXHDP_VER2);
+	__raw_writel(0, g_tran_pool->dma_regs+CPDMA_TXCP_VER2);
+    gen_cpsw_write(0, CPDMA_TXCONTROL);
+	writel(0, &pdata->wr_regs->tx_en);
+	gen_cpsw_write(2,CPDMA_EOI_VECTOR);
+	generic_irq_dump();
+	while(1) {
+		msleep(1000);
+		dbg_dump_dma();
+		generic_irq_dump();
+	}
+	return 0;
 }
 
 #define DMA_CTRL_SOF (1<<31)
 #define DMA_CTRL_EOP (1<<30)
 #define DMA_CTRL_OWN (1<<29)
+#define DMA_CTRL_EOQ (1<<28)
 #define DMA_CTRL_PORT (1<<20)
 #define DMA_CTRL_EN_PORT1 (1<<16)
 #define DMA_CTRL_EN_PORT2 (2<<16)
+int gen_cppi_desc_fill(struct gen_cpsw_cppi_des *des, void *buf, dma_addr_t dma_addr, int len)
+{
+	__raw_writel(0, &des->hw_next);
+	__raw_writel(0x400, &des->hw_len);
+	__raw_writel((u32)buf, &des->sw_buffer);
+	__raw_writel(len, &des->sw_len);
+	__raw_writel(dma_addr, &des->hw_buffer);
+	__raw_writel(DMA_CTRL_SOF|DMA_CTRL_EOP|DMA_CTRL_OWN|DMA_CTRL_PORT|DMA_CTRL_EN_PORT2| len, &des->hw_mode);
+	return 0;
+}
+
 void gen_tran_test(struct gen_net_data *pdata)
 {
 	void *buf;
-	u32 size;
 	u32 len = 1024;
 	struct gen_cpsw_cppi_des *des;
 	dma_addr_t dma_addr;
@@ -262,7 +335,142 @@ void gen_tran_test(struct gen_net_data *pdata)
 		return;
 	}
 
-	gen_cppi_desc_fill(des, buf, dma_buf, len);
+	gen_cppi_desc_fill(des, buf, dma_addr, len);
 	gen_submit_dma(pdata, des);
 }
 
+int gen_submit_data(struct gen_net_data *pdata, void *buf, int size)
+{
+	struct gen_cpsw_cppi_des *desc;
+	struct hw_chan_list *chan_list;
+	dma_addr_t dma_addr;
+
+	dma_addr = dma_map_single(&pdata->pdev->dev, buf, size, DMA_TO_DEVICE);
+	if (!dma_addr) {
+		printk("err: dma map failed\n");
+		return -1;
+	}
+
+	desc = gen_cpdma_alloc_desc(g_tran_pool);
+	if (!desc) {
+		printk("err: alloc des failed\n");
+		return -1;
+	}
+	gen_cppi_desc_fill(desc, buf, dma_addr, size);
+
+	chan_list = (struct gen_cpsw_cppi_des *)kmalloc(sizeof(struct hw_chan_list), GFP_KERNEL);
+	if (!chan_list) {
+		printk("err: alloc list failed\n");
+		goto out;
+	}
+	chan_list->dma_chan_desc = desc;
+
+	INIT_LIST_HEAD(&chan_list->list);
+	list_add_tail(&chan_list->list, &g_tran_pool->tx_list);
+
+	//dbg_dump_list(&chan_list->list);
+	gen_cpsw_write((u32)desc_to_phy(desc), CPDMA_TXHDP_VER2);
+	return 0;
+out:
+	gen_cpdma_free_desc(pdata, desc);
+	return -1;
+}
+
+int gen_proccess_queue(struct gen_net_data *pdata, int directory)
+{
+	struct gen_cpsw_cppi_des  *desc, *n;
+	struct hw_chan_list *chan, *chan_n;
+	u32 hwmode;
+	void *buf;
+	u32 len, dma_dirc;
+
+	if (directory == DMA_TO_DEVICE) {
+		if (list_empty(&g_tran_pool->tx_list))
+			return 0;
+	}
+
+	dma_dirc = (directory == DMA_TO_DEVICE) ? DMA_TO_DEVICE : DMA_FROM_DEVICE;
+	list_for_each_entry_safe(chan, chan_n, &g_tran_pool->tx_list, list) {
+		desc = chan->dma_chan_desc;
+		hwmode = __raw_readl(&desc->hw_mode);
+		if (hwmode | DMA_CTRL_EOQ) {
+#if 0
+			DBG("zz %s proccess desc:%08x\n", __func__, desc);
+			gen_cpsw_write((u32)desc_to_phy(desc), CPDMA_TXCP_VER2);
+			buf = (void*)__raw_readl(&desc->sw_buffer);
+			len = __raw_readl(&desc->sw_len);
+			dma_unmap_single(&pdata->pdev->dev, desc->hw_buffer, len, dma_dirc);
+			gen_cpdma_free_desc(pdata, desc);
+			dump_cpsw_regs(pdata->base);
+			list_del(&chan->list);
+			//dbg_dump_desc(desc);
+			//dbg_dump_dma();
+#else
+			gen_dbg_process(pdata,desc);
+#endif
+		}
+	}
+	return 0;
+}
+
+#define CPPI_RAM_ADDR (0x4a102000)
+void gen_cpsw_crtl_pool_init(struct gen_net_data *pdata)
+{
+	struct gen_tran_pool *pool;
+
+	pool = kmalloc(sizeof(struct gen_tran_pool), GFP_KERNEL);
+	pool->base = (void*)pdata->regs;
+	pool->cpsw_addr = pdata->regs;
+	pool->dma_regs = pdata->base+ DMA_REGS_OFF;
+	pool->cppi_ram_addr= pdata->base + RAM_REGS_OFF;
+	pool->phy_addr = (void*)CPPI_RAM_ADDR;
+	pool->bitmap = kzalloc(MAX_TRAN_RAM_SIZE, GFP_KERNEL);
+	pool->num_desc = MAX_TRAN_RAM_SIZE;
+	pool->pdev = pdata->pdev;
+	pool->ndev = pdata->ndev;
+	spin_lock_init(pool->lock);
+	INIT_LIST_HEAD(&pool->rx_list);
+	INIT_LIST_HEAD(&pool->tx_list);
+
+	g_tran_pool = pool;
+}
+
+int gen_cppi_init(struct gen_net_data *pdata, u32 phy_addr)
+{
+	gen_cpsw_crtl_pool_init(pdata);
+	gen_dma_control_init(g_tran_pool->dma_regs);
+	__raw_writel(0x01, &pdata->wr_regs->tx_en);
+	__raw_writel(0x01, &pdata->wr_regs->rx_en);
+	return 0;
+}
+
+static void gen_dbg_clear_pend(struct gen_net_data *pdata)
+{
+	 //gen_cpsw_write(2,CPDMA_EOI_VECTOR);
+	 gen_cpsw_write(2, 0x94);
+	 writel(0, &pdata->wr_regs->tx_en);
+}
+
+static void gen_dbg_process(struct gen_net_data *pdata, struct gen_cpsw_cppi_des *desc)
+{
+	u32 status, len;
+	void *buf;
+
+	status = __raw_readl(&desc->hw_mode);
+	if (status & CPDMA_DESC_OWNER) {
+		printk("zz %s busy\n", __func__);
+	}
+
+	dbg_dump_dma();
+	generic_irq_dump();
+	gen_cpsw_write((u32)desc_to_phy(desc), CPDMA_TXCP_VER2);
+	buf = (void*)__raw_readl(&desc->sw_buffer);
+	len = __raw_readl(&desc->sw_len);
+	dma_unmap_single(&pdata->pdev->dev, desc->hw_buffer, len, DMA_TO_DEVICE);
+	dbg_dump_dma();
+	generic_irq_dump();
+	gen_dbg_clear_pend(pdata);
+	generic_irq_dump();
+
+	while(1);
+}
-- 
1.9.1


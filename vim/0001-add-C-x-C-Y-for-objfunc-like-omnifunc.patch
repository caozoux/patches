From 3ee39aa5f5621beaf692c74d533fe46aeb0e09cb Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Thu, 6 Apr 2017 19:04:07 +0800
Subject: [PATCH] add C-x C-Y for objfunc like omnifunc

Signed-off-by: zou cao <cao.zou@windriver.com>
---
 src/edit.c    | 46 +++++++++++++++++++++++++++++++++++++---------
 src/option.c  | 16 ++++++++++++++++
 src/option.h  |  3 +++
 src/structs.h |  1 +
 4 files changed, 57 insertions(+), 9 deletions(-)

diff --git a/src/edit.c b/src/edit.c
index 0d9e9d4..482e286 100644
--- a/src/edit.c
+++ b/src/edit.c
@@ -35,6 +35,7 @@
 #define CTRL_X_SPELL		14
 #define CTRL_X_LOCAL_MSG	15	/* only used in "ctrl_x_msgs" */
 #define CTRL_X_EVAL		16	/* for builtin function complete() */
+#define CTRL_X_OBJ		17	
 
 #define CTRL_X_MSG(i) ctrl_x_msgs[(i) & ~CTRL_X_WANT_IDENT]
 #define CTRL_X_MODE_LINE_OR_EVAL(m) (m == CTRL_X_WHOLE_LINE || m == CTRL_X_EVAL)
@@ -1438,6 +1439,8 @@ docomplete:
 #endif /* FEAT_INS_EXPAND */
 
 	case Ctrl_Y:	/* copy from previous line or scroll down */
+	    if (ctrl_x_mode == CTRL_X_OBJ)
+		goto docomplete;
 	case Ctrl_E:	/* copy from next line	   or scroll up */
 	    c = ins_ctrl_ey(c);
 	    break;
@@ -2293,6 +2296,8 @@ vim_is_ctrl_x_key(int c)
 	    return (c == Ctrl_U || c == Ctrl_P || c == Ctrl_N);
 	case CTRL_X_OMNI:
 	    return (c == Ctrl_O || c == Ctrl_P || c == Ctrl_N);
+	case CTRL_X_OBJ:
+	    return (c == Ctrl_Y || c == Ctrl_P || c == Ctrl_N);
 #endif
 	case CTRL_X_SPELL:
 	    return (c == Ctrl_S || c == Ctrl_P || c == Ctrl_N);
@@ -2323,6 +2328,7 @@ ins_compl_accept_char(int c)
 	     * "proto", not "proto/" as a whole */
 	    return vim_isfilec(c) && !vim_ispathsep(c);
 
+	case CTRL_X_OBJ:    
 	case CTRL_X_CMDLINE:
 	case CTRL_X_OMNI:
 	    /* Command line and Omni completion can work with just about any
@@ -3479,8 +3485,9 @@ ins_compl_need_restart(void)
     /* Return TRUE if we didn't complete finding matches or when the
      * 'completefunc' returned "always" in the "refresh" dictionary item. */
     return compl_was_interrupted
-	|| ((ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI)
-						  && compl_opt_refresh_always);
+	|| ((ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI 
+	|| ctrl_x_mode == CTRL_X_OBJ) && compl_opt_refresh_always);
+						  
 }
 
 /*
@@ -3710,7 +3717,7 @@ ins_compl_prep(int c)
 	switch (c)
 	{
 	    case Ctrl_E:
-	    case Ctrl_Y:
+	    /*case Ctrl_Y:
 		ctrl_x_mode = CTRL_X_SCROLL;
 		if (!(State & REPLACE_FLAG))
 		    edit_submode = (char_u *)_(" (insert) Scroll (^E/^Y)");
@@ -3718,7 +3725,7 @@ ins_compl_prep(int c)
 		    edit_submode = (char_u *)_(" (replace) Scroll (^E/^Y)");
 		edit_submode_pre = NULL;
 		showmode();
-		break;
+		break;*/
 	    case Ctrl_L:
 		ctrl_x_mode = CTRL_X_WHOLE_LINE;
 		break;
@@ -3741,6 +3748,9 @@ ins_compl_prep(int c)
 	    case Ctrl_O:
 		ctrl_x_mode = CTRL_X_OMNI;
 		break;
+	    case Ctrl_Y:
+		ctrl_x_mode = CTRL_X_OBJ;
+		break;
 #endif
 	    case 's':
 	    case Ctrl_S:
@@ -4041,7 +4051,7 @@ ins_compl_next_buf(buf_T *buf, int flag)
  */
     static void
 expand_by_function(
-    int		type,	    /* CTRL_X_OMNI or CTRL_X_FUNCTION */
+    int		type,	    /* CTRL_X_OMNI or CTRL_X_FUNCTION , CTRL_X_OBJ*/
     char_u	*base)
 {
     list_T      *matchlist = NULL;
@@ -4053,7 +4063,16 @@ expand_by_function(
     buf_T	*curbuf_save;
     typval_T	rettv;
 
-    funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
+    if (type == CTRL_X_FUNCTION) {
+	funcname = curbuf->b_p_cfu;
+    } else if (type == CTRL_X_OBJ) {
+	funcname = curbuf->b_p_objfu; 
+    } else {
+	funcname = curbuf->b_p_ofu; 
+    }
+
+    //funcname = (type == CTRL_X_FUNCTION) ? curbuf->b_p_cfu : curbuf->b_p_ofu;
+
     if (*funcname == NUL)
 	return;
 
@@ -4419,6 +4438,7 @@ ins_compl_get_exp(pos_T *ini)
 #ifdef FEAT_COMPL_FUNC
 	case CTRL_X_FUNCTION:
 	case CTRL_X_OMNI:
+	case CTRL_X_OBJ:
 	    expand_by_function(type, compl_pattern);
 	    break;
 #endif
@@ -5326,7 +5346,8 @@ ins_complete(int c, int enable_pum)
 		compl_col = (int)(compl_xp.xp_pattern - compl_pattern);
 	    compl_length = curs_col - compl_col;
 	}
-	else if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI)
+	else if (ctrl_x_mode == CTRL_X_FUNCTION || ctrl_x_mode == CTRL_X_OMNI 
+		|| ctrl_x_mode == CTRL_X_OBJ)
 	{
 #ifdef FEAT_COMPL_FUNC
 	    /*
@@ -5342,8 +5363,15 @@ ins_complete(int c, int enable_pum)
 
 	    /* Call 'completefunc' or 'omnifunc' and get pattern length as a
 	     * string */
-	    funcname = ctrl_x_mode == CTRL_X_FUNCTION
-					  ? curbuf->b_p_cfu : curbuf->b_p_ofu;
+	    if (ctrl_x_mode == CTRL_X_FUNCTION) {
+		funcname = curbuf->b_p_cfu;
+	    } else if (ctrl_x_mode == CTRL_X_OBJ) {
+		funcname = curbuf->b_p_objfu; 
+	    } else {
+		funcname = curbuf->b_p_ofu; 
+	    }
+	    /*funcname = ctrl_x_mode == CTRL_X_FUNCTION
+					  ? curbuf->b_p_cfu : curbuf->b_p_ofu;*/
 	    if (*funcname == NUL)
 	    {
 		EMSG2(_(e_notset), ctrl_x_mode == CTRL_X_FUNCTION
diff --git a/src/option.c b/src/option.c
index 920f163..31cff84 100644
--- a/src/option.c
+++ b/src/option.c
@@ -145,6 +145,7 @@
 #define PV_NF		OPT_BUF(BV_NF)
 #ifdef FEAT_COMPL_FUNC
 # define PV_OFU		OPT_BUF(BV_OFU)
+# define PV_OBJFU	OPT_BUF(BV_OBJFU)
 #endif
 #define PV_PATH		OPT_BOTH(OPT_BUF(BV_PATH))
 #define PV_PI		OPT_BUF(BV_PI)
@@ -305,6 +306,7 @@ static char_u	*p_cpt;
 #ifdef FEAT_COMPL_FUNC
 static char_u	*p_cfu;
 static char_u	*p_ofu;
+static char_u	*p_objfu;
 #endif
 static int	p_eol;
 static int	p_fixeol;
@@ -1966,6 +1968,17 @@ static struct vimoption options[] =
     {"open",	    NULL,   P_BOOL|P_VI_DEF,
 			    (char_u *)NULL, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
+
+    {"objfunc",    "objfu",  P_STRING|P_ALLOCED|P_VI_DEF|P_SECURE,
+#ifdef FEAT_COMPL_FUNC
+			    (char_u *)&p_objfu, PV_OBJFU,
+			    {(char_u *)"", (char_u *)0L}
+#else
+			    (char_u *)NULL, PV_NONE,
+			    {(char_u *)0L, (char_u *)0L}
+#endif
+			    SCRIPTID_INIT},
+
     {"opendevice",  "odev", P_BOOL|P_VI_DEF,
 #if defined(MSWIN)
 			    (char_u *)&p_odev, PV_NONE,
@@ -5531,6 +5544,7 @@ check_buf_options(buf_T *buf)
 #ifdef FEAT_COMPL_FUNC
     check_string_option(&buf->b_p_cfu);
     check_string_option(&buf->b_p_ofu);
+    check_string_option(&buf->b_p_objfu);
 #endif
 #ifdef FEAT_KEYMAP
     check_string_option(&buf->b_p_keymap);
@@ -10429,6 +10443,7 @@ get_varp(struct vimoption *p)
 #ifdef FEAT_COMPL_FUNC
 	case PV_CFU:	return (char_u *)&(curbuf->b_p_cfu);
 	case PV_OFU:	return (char_u *)&(curbuf->b_p_ofu);
+	case PV_OBJFU:	return (char_u *)&(curbuf->b_p_objfu);
 #endif
 	case PV_EOL:	return (char_u *)&(curbuf->b_p_eol);
 	case PV_FIXEOL:	return (char_u *)&(curbuf->b_p_fixeol);
@@ -10823,6 +10838,7 @@ buf_copy_options(buf_T *buf, int flags)
 #ifdef FEAT_COMPL_FUNC
 	    buf->b_p_cfu = vim_strsave(p_cfu);
 	    buf->b_p_ofu = vim_strsave(p_ofu);
+	    buf->b_p_objfu = vim_strsave(p_objfu);
 #endif
 	    buf->b_p_sts = p_sts;
 	    buf->b_p_sts_nopaste = p_sts_nopaste;
diff --git a/src/option.h b/src/option.h
index 13acabf..b9c927f 100644
--- a/src/option.h
+++ b/src/option.h
@@ -1103,6 +1103,9 @@ enum
     , BV_UL
     , BV_WM
     , BV_COUNT	    /* must be the last one */
+#ifdef FEAT_COMPL_FUNC
+    , BV_OBJFU
+#endif
 };
 
 /*
diff --git a/src/structs.h b/src/structs.h
index 3fdfb5f..13c50de 100644
--- a/src/structs.h
+++ b/src/structs.h
@@ -2067,6 +2067,7 @@ struct file_buffer
 #ifdef FEAT_COMPL_FUNC
     char_u	*b_p_cfu;	/* 'completefunc' */
     char_u	*b_p_ofu;	/* 'omnifunc' */
+    char_u	*b_p_objfu;	/* 'objfunc' */
 #endif
     int		b_p_eol;	/* 'endofline' */
     int		b_p_fixeol;	/* 'fixendofline' */
-- 
1.9.1


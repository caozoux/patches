From a17706d9dfb60ae9592dfc25b8da22b1abb4db3c Mon Sep 17 00:00:00 2001
From: zoucaox <zoucaox@outlook.com>
Date: Sat, 11 Nov 2017 10:22:21 +0800
Subject: [PATCH 34/34] newam335x: fixed dmesg with console

fifo will be block about 50ms when press transfer data,
so add a wait for fifo empty in start tx

Signed-off-by: zoucaox <zoucaox@outlook.com>
---
 drivers/tty/serial/newam335x_serial.c | 102 ++++++++++++++++++----------------
 1 file changed, 55 insertions(+), 47 deletions(-)

diff --git a/drivers/tty/serial/newam335x_serial.c b/drivers/tty/serial/newam335x_serial.c
index 085213c..58a13cc 100644
--- a/drivers/tty/serial/newam335x_serial.c
+++ b/drivers/tty/serial/newam335x_serial.c
@@ -13,6 +13,7 @@
 #include <linux/platform_device.h>
 #include <linux/of.h>
 #include <linux/io.h>
+#include <linux/slab.h>
 //#include <linux/newam335x_uart.h>
 #include <linux/clk.h>
 #include <linux/serial_core.h>
@@ -35,6 +36,9 @@
 
 #define SERIAL_GENERIC_MAJOR 204
 #define SERIAL_GENERIC_MINOR 213
+
+#define OMAP_UART_SCR_TX_EMPTY			(1 << 3)
+
 /*
  * Local per-uart structure.
  */
@@ -60,23 +64,6 @@ struct newam335x_uart {
 static struct uart_driver newam335x_uart_driver;
 static struct console newam335x_uart_console;
 
-void dump_mem(void *addr, int len)
-{
-	int i, l;
-	int *buf = (int*)addr;
-	for (i = 0; i < len/4; i = i+16) {
-		printk("%08x: ", i*4);
-		for (l = 0;  l < 16; ++l) {
-			if ((i+l)>= len) {
-				printk("\n");
-				return;
-			}
-			printk("%08x ",buf[i+l]);
-		}
-		printk("\n");
-	}
-}
-
 static inline unsigned int serial_in(struct newam335x_uart *up, int offset)
 {
 	offset <<= up->port.regshift;
@@ -89,6 +76,15 @@ static inline void serial_out(struct newam335x_uart *up, int offset, int value)
 	writew(value, up->port.membase + offset);
 }
 
+
+void newam335x_dump(struct newam335x_uart *up)
+{
+	return;
+	trace_printk("LSR:%08x \n", serial_in(up, UART_LSR));
+	trace_printk("SCR:%08x \n", serial_in(up, UART_OMAP_SCR));
+	trace_printk("FCR:%08x \n", serial_in(up, UART_FCR));
+}
+
 void low_newam335x_uart_putchar(struct newam335x_uart *up, u8 ch)
 {
       while ((serial_in(up, UART_LSR) & UART_LSR_THRE) == 0)
@@ -244,12 +240,18 @@ static void newam335x_uart_start_tx(struct uart_port *port)
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
 	u32 val, iir;
 
-	iir = serial_in(up, UART_IIR);
-	val =  serial_in(up, UART_IER);
-	val |= UART_IER_THRI;
-	serial_out(up, UART_IER, val);
-		
-	iir = serial_in(up, UART_IIR);
+	if (up->scr & OMAP_UART_SCR_TX_EMPTY) {
+		up->scr &= ~OMAP_UART_SCR_TX_EMPTY;
+		serial_out(up, UART_OMAP_SCR, up->scr);
+	}
+
+	if (!(up->ier & UART_IER_THRI)) {
+		up->ier |= UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	} else {
+		wait_for_xmitr(up);
+	}
+
 }
 
 static void newam335x_uart_stop_tx(struct uart_port *port)
@@ -257,13 +259,26 @@ static void newam335x_uart_stop_tx(struct uart_port *port)
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
 	u32 val, iir;
 
-	iir = serial_in(up, UART_IIR);
-	val =  serial_in(up, UART_IER);
-	val |= UART_IER_THRI;
-	val &= ~UART_IER_THRI;
-	serial_out(up, UART_IER, val);
-		
-	iir = serial_in(up, UART_IIR);
+	if (up->scr & OMAP_UART_SCR_TX_EMPTY) {
+		/* THR interrupt is fired when both TX FIFO and TX
+		 * shift register are empty. This means there's nothing
+		 * left to transmit now, so make sure the THR interrupt
+		 * is fired when TX FIFO is below the trigger level,
+		 * disable THR interrupts and toggle the RS-485 GPIO
+		 * data direction pin if needed.
+		 */
+		up->scr &= ~OMAP_UART_SCR_TX_EMPTY;
+		serial_out(up, UART_OMAP_SCR, up->scr);
+	} else {
+		up->scr |= OMAP_UART_SCR_TX_EMPTY;
+		serial_out(up, UART_OMAP_SCR, up->scr);
+		return;
+	}
+
+	if (up->ier & UART_IER_THRI) {
+		up->ier &= ~UART_IER_THRI;
+		serial_out(up, UART_IER, up->ier);
+	}
 }
 
 static void newam335x_uart_stop_rx(struct uart_port *port)
@@ -271,12 +286,8 @@ static void newam335x_uart_stop_rx(struct uart_port *port)
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
 	u32 val, iir;
 
-	iir = serial_in(up, UART_IIR);
-	val =  serial_in(up, UART_IER);
-	val &= ~(UART_IER_RLSI | UART_IER_RDI);
-	serial_out(up, UART_IER, val);
-		
-	iir = serial_in(up, UART_IIR);
+	up->ier &= ~(UART_IER_RLSI | UART_IER_RDI);
+	serial_out(up, UART_IER, up->ier);
 }
 
 static void newam335x_uart_break_ctl(struct uart_port *port, int break_state)
@@ -412,13 +423,10 @@ static irqreturn_t serial_newam335x_irq(int irq, void *dev_id)
 	unsigned int flags;
 	int max_count = 256;
 
-	//spin_lock(&up->port.lock);
-	//spin_lock_irqsave(&up->port.lock, &flags);
-	spin_lock_irqsave(&up->port.lock, flags);
+	spin_lock(&up->port.lock);
 
 	do {
 		iir = serial_in(up, UART_IIR);
-		//printk("zz %s iir:%08x 1\n",__func__, (int)iir);
 		if (iir & UART_IIR_NO_INT)
 			break;
 
@@ -437,13 +445,10 @@ static irqreturn_t serial_newam335x_irq(int irq, void *dev_id)
 				break;
 			default:
 				printk("zz %s %d iir:%08x lsr:%08x fcr:%08x\n", __func__, __LINE__, iir, lsr, serial_in(up, UART_FCR));
-				//dump_mem(up->port.membase, 0x90);
-				//while(1);
 				break;
 		}
 	} while (!(iir & UART_IIR_NO_INT) && max_count--);
-	//spin_unlock(&up->port.lock);
-	spin_unlock_irqrestore(&up->port.lock, flags);
+	spin_unlock(&up->port.lock);
 
 	tty_flip_buffer_push(&up->port.state->port);
 
@@ -481,7 +486,6 @@ static void newam335x_uart_shutdown(struct uart_port *port)
 {
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
 
-	printk("zz %s %d \n", __func__, __LINE__);
 	/*
 	 * Disable interrupts from this port
 	 */
@@ -550,13 +554,13 @@ static int newam335x_uart_probe(struct platform_device *pdev)
 	struct resource *res_irq;
 	int uartirq = 0;
 
-
+	early_print("%s +\n", __func__);
 	port = &newam335x_uart_ports.port;
 	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (res_mem)
 		port->mapbase = res_mem->start;
 
-#if defined(CONFIG_OF)
+#if 0
 	uartirq = irq_of_parse_and_map(pdev->dev.of_node, 0);
 	if (!uartirq)
 		return -EPROBE_DEFER;
@@ -587,6 +591,7 @@ static int newam335x_uart_probe(struct platform_device *pdev)
 	platform_set_drvdata(pdev, port);
 
 	uart_add_one_port(&newam335x_uart_driver, port);
+	early_print("%s -\n", __func__);
 	return 0;
 }
 
@@ -610,12 +615,15 @@ static int newam335x_uart_remove(struct platform_device *pdev)
 	.remove	= newam335x_uart_remove,
 	.driver	= {
 		.name		= DRV_NAME,
+#if defined(CONFIG_OF)
 		.of_match_table = of_match_ptr(omap_serial_of_match),
+#endif
 	},
 };
 
 static int __init newam335x_uart_init(void)
 {
+	early_print("%s\n", __func__);
 	uart_register_driver(&newam335x_uart_driver);
 	platform_driver_register(&newam335x_uart_platform_driver);
 	return 0;
-- 
1.9.1


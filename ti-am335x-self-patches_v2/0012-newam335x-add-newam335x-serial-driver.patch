From e01a3b1752cc99f4f44eafe72ea9b97a4b8e51b4 Mon Sep 17 00:00:00 2001
From: zoucao <zoucaox@outlook.com>
Date: Mon, 14 Aug 2017 15:48:30 +0800
Subject: [PATCH 12/34] newam335x: add newam335x serial driver

---
 arch/arm/configs/newam335x_defconfig  |   1 +
 arch/arm/mach-newam335x/Kconfig       |   1 +
 arch/arm/mach-newam335x/Makefile      |   2 +-
 arch/arm/mach-newam335x/board.c       |   5 +-
 arch/arm/mach-newam335x/platform.c    |  45 ++++
 drivers/tty/serial/Kconfig            |   5 +
 drivers/tty/serial/Makefile           |   1 +
 drivers/tty/serial/newam335x_serial.c | 417 ++++++++++++++++++++++++++++++++++
 8 files changed, 474 insertions(+), 3 deletions(-)
 create mode 100644 arch/arm/mach-newam335x/platform.c
 create mode 100644 drivers/tty/serial/newam335x_serial.c

diff --git a/arch/arm/configs/newam335x_defconfig b/arch/arm/configs/newam335x_defconfig
index 8042e4c..b012f32 100644
--- a/arch/arm/configs/newam335x_defconfig
+++ b/arch/arm/configs/newam335x_defconfig
@@ -6,5 +6,6 @@ CONFIG_ARCH_NEWAM335X=y
 CONFIG_DEBUG_NEWAM335X_UART1=y
 CONFIG_DEBUG_LL=y
 CONFIG_GENERIC_IRQ_CHIP=y
+CONFIG_SERIAL_NEWAM335X=y
 #CONFIG_GENERIC_UART1=Y
 #DEBUG_AM33XXUART1=y
diff --git a/arch/arm/mach-newam335x/Kconfig b/arch/arm/mach-newam335x/Kconfig
index c238fcc..2e4dbef 100644
--- a/arch/arm/mach-newam335x/Kconfig
+++ b/arch/arm/mach-newam335x/Kconfig
@@ -1,3 +1,4 @@
 config ARCH_NEWAM335X
 	def_bool y
 	select GENERIC_IRQ_CHIP
+	select SERIAL_CORE
diff --git a/arch/arm/mach-newam335x/Makefile b/arch/arm/mach-newam335x/Makefile
index 4acc206..4eb8438 100644
--- a/arch/arm/mach-newam335x/Makefile
+++ b/arch/arm/mach-newam335x/Makefile
@@ -2,4 +2,4 @@
 #ccflags-$(CONFIG_ARCH_MULTIPLATFORM) := -I$(srctree)/$(src)/include \
 	-I$(srctree)/arch/arm/plat-omap/include
 
-obj-y := board.o interrupt.o  timer.o clk.o
+obj-y := board.o interrupt.o  timer.o clk.o platform.o
diff --git a/arch/arm/mach-newam335x/board.c b/arch/arm/mach-newam335x/board.c
index c719553..ab98b70 100644
--- a/arch/arm/mach-newam335x/board.c
+++ b/arch/arm/mach-newam335x/board.c
@@ -58,9 +58,10 @@ void __init newam335x_init_irq(void)
 	omap_init_irq(OMAP_INTR_CON_BASE, 96);
 }
 
-void __init newam335x_evm_init(void)
+void __init newam335x_machine_init(void)
 {
 	early_print("%s\n", __func__);
+	board_newam335x_init();
 }
 
 void __init newam335x_init_late(void)
@@ -91,7 +92,7 @@ asmlinkage void __exception_irq_entry low_newam335x_intc_handle_irq(struct pt_re
 	.init_early	= newam335x_init_early,
 	.init_irq	= newam335x_init_irq,
 	.handle_irq	= newam335x_intc_handle_irq,
-	.init_machine	= newam335x_evm_init,
+	.init_machine	= newam335x_machine_init,
 	.init_late	= newam335x_init_late,
 	.init_time	= newam335x_sync32k_timer_init,
 	.restart	= newam335x_restart,
diff --git a/arch/arm/mach-newam335x/platform.c b/arch/arm/mach-newam335x/platform.c
new file mode 100644
index 0000000..0c208e8
--- /dev/null
+++ b/arch/arm/mach-newam335x/platform.c
@@ -0,0 +1,45 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/clk.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/platform_data/pca953x.h>
+#include <linux/can/platform/ti_hecc.h>
+#include <linux/davinci_emac.h>
+#include <linux/mmc/host.h>
+#include <linux/usb/musb.h>
+#include <linux/platform_data/gpio-omap.h>
+#include <linux/irq.h>
+
+#include <asm/exception.h>
+#include <asm/mach/irq.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/map.h>
+#include <asm/setup.h>
+#include "plat.h"
+
+#define GENERIC_UART_RESOURCE_BASE 0x44E09000
+static struct resource newam335x_uart_resources[] = {
+	{
+		.start	= GENERIC_UART_RESOURCE_BASE,
+		.end	= GENERIC_UART_RESOURCE_BASE + 0x3FFF,
+		.flags	= IORESOURCE_MEM,
+	},
+	{
+		.start	= 72,
+		.flags	= IORESOURCE_IRQ,
+	},
+};
+
+static struct platform_device newam335x_uart_device = {
+	.name                   = "newam335x_uart",
+	.id                     = 0,
+	.num_resources	= ARRAY_SIZE(newam335x_uart_resources),
+	.resource	= newam335x_uart_resources,
+};
+
+void __init board_newam335x_init(void)
+{
+	platform_device_register(&newam335x_uart_device);
+}
diff --git a/drivers/tty/serial/Kconfig b/drivers/tty/serial/Kconfig
index 25c1d7b..8693a80 100644
--- a/drivers/tty/serial/Kconfig
+++ b/drivers/tty/serial/Kconfig
@@ -1663,6 +1663,11 @@ config SERIAL_MVEBU_CONSOLE
 	  and warnings and which allows logins in single user mode)
 	  Otherwise, say 'N'.
 
+config SERIAL_NEWAM335X
+	bool "Support for console on newam335x"
+	depends on ARCH_NEWAM335X=y
+	select SERIAL_CORE_CONSOLE
+
 endmenu
 
 config SERIAL_MCTRL_GPIO
diff --git a/drivers/tty/serial/Makefile b/drivers/tty/serial/Makefile
index 1278d37..01ec67c 100644
--- a/drivers/tty/serial/Makefile
+++ b/drivers/tty/serial/Makefile
@@ -93,6 +93,7 @@ obj-$(CONFIG_SERIAL_STM32)	+= stm32-usart.o
 obj-$(CONFIG_SERIAL_MVEBU_UART)	+= mvebu-uart.o
 obj-$(CONFIG_SERIAL_PIC32)	+= pic32_uart.o
 obj-$(CONFIG_SERIAL_MPS2_UART)	+= mps2-uart.o
+obj-$(CONFIG_SERIAL_NEWAM335X) += newam335x_serial.o
 
 # GPIOLIB helpers for modem control lines
 obj-$(CONFIG_SERIAL_MCTRL_GPIO)	+= serial_mctrl_gpio.o
diff --git a/drivers/tty/serial/newam335x_serial.c b/drivers/tty/serial/newam335x_serial.c
new file mode 100644
index 0000000..3e3ed1c
--- /dev/null
+++ b/drivers/tty/serial/newam335x_serial.c
@@ -0,0 +1,417 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/timer.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/delay.h>
+#include <linux/console.h>
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/serial.h>
+#include <linux/serial_core.h>
+#include <linux/serial_reg.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/io.h>
+//#include <linux/newam335x_uart.h>
+#include <linux/clk.h>
+#include <linux/serial_core.h>
+#include <linux/platform_data/serial-omap.h>
+#include <asm/setup.h>
+
+#define DRV_NAME "newam335x_uart"
+
+#define SERIAL_GENERIC_MAJOR 204
+#define SERIAL_GENERIC_MINOR 213
+/*
+ * Local per-uart structure.
+ */
+struct newam335x_uart {
+	struct uart_port port;
+	struct timer_list tmr;
+	unsigned int sigs;	/* Local copy of line sigs */
+	unsigned short imr;	/* Local IMR mirror */
+};
+
+static struct newam335x_uart newam335x_uart_ports;
+static struct uart_driver newam335x_uart_driver;
+static struct console newam335x_uart_console;
+
+static inline unsigned int serial_in(struct newam335x_uart *up, int offset)
+{
+	offset <<= up->port.regshift;
+	return readw(up->port.membase + offset);
+}
+
+static inline void serial_out(struct newam335x_uart *up, int offset, int value)
+{
+	offset <<= up->port.regshift;
+	writew(value, up->port.membase + offset);
+}
+
+
+void low_newam335x_uart_putchar(struct newam335x_uart *up, u8 ch)
+{
+       while ((serial_in(up, UART_LSR) & UART_LSR_THRE) == 0)
+               ;
+	  while(1)
+       serial_out(up, UART_TX, 'a');
+}
+#define BOTH_EMPTY (UART_LSR_TEMT | UART_LSR_THRE)
+static inline void wait_for_xmitr(struct newam335x_uart *up)
+{
+	unsigned int status, tmout = 10000;
+
+	//low_newam335x_uart_putchar(up, 'a');
+	/* Wait up to 10ms for the character(s) to be sent. */
+	do {
+		status = serial_in(up, UART_LSR);
+
+		if (--tmout == 0)
+			break;
+		udelay(1);
+	} while ((status & BOTH_EMPTY) != BOTH_EMPTY);
+
+#if 0
+	/* Wait up to 1s for flow control if necessary */
+	if (up->port.flags & UPF_CONS_FLOW) {
+		tmout = 1000000;
+		for (tmout = 1000000; tmout; tmout--) {
+			unsigned int msr = serial_in(up, UART_MSR);
+
+			up->msr_saved_flags |= msr & MSR_SAVE_FLAGS;
+			if (msr & UART_MSR_CTS)
+				break;
+
+			udelay(1);
+		}
+	}
+#endif
+}
+
+void serial_newam335x_console_putchar(struct uart_port *port, int ch)
+{
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	wait_for_xmitr(up);
+	serial_out(up, UART_TX, ch);
+}
+
+static void newam335x_uart_console_write(struct console *co, const char *s,
+				      unsigned int count)
+{
+	struct newam335x_uart *up = &newam335x_uart_ports;
+	unsigned int ier;
+	//early_print("%s \n", __func__);
+	ier = serial_in(up, UART_IER);
+	serial_out(up, UART_IER, 0);
+	uart_console_write(&up->port, s, count, serial_newam335x_console_putchar);
+	wait_for_xmitr(up);
+	serial_out(up, UART_IER, ier);
+}
+
+static int __init newam335x_uart_console_setup(struct console *co, char *options)
+{
+	int baud = 115200;
+	int bits = 8;
+	int parity = 'n';
+	int flow = 'n';
+	early_print("%s \n", __func__, &newam335x_uart_ports);
+	uart_parse_options(options, &baud, &parity, &bits, &flow);
+	return uart_set_options(&newam335x_uart_ports.port, co, baud, parity, bits, flow);
+}
+
+static struct uart_driver newam335x_uart_driver = {
+	.owner		= THIS_MODULE,
+	.driver_name	= DRV_NAME,
+	.dev_name	= "ttyO",
+	.major		= SERIAL_GENERIC_MAJOR,
+	.minor		= SERIAL_GENERIC_MINOR,
+	.nr		= 1,
+	.cons		= &newam335x_uart_console,
+};
+
+static struct console newam335x_uart_console = {
+	.name	= "ttyO",
+	.write	= newam335x_uart_console_write,
+	.device	= uart_console_device,
+	.setup	= newam335x_uart_console_setup,
+	.flags	= CON_PRINTBUFFER,
+	.index	= -1,
+	.data	= &newam335x_uart_driver,
+};
+
+static int __init newam335x_uart_console_init(void)
+{
+	early_print("zz %s \n", __func__);
+	register_console(&newam335x_uart_console);
+	return 0;
+}
+//console_initcall(newam335x_uart_console_init);
+
+static unsigned int newam335x_uart_tx_empty(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+	return 0;
+}
+
+static unsigned int newam335x_uart_get_mctrl(struct uart_port *port)
+{
+	struct newam335x_uart *pp = container_of(port, struct newam335x_uart, port);
+	unsigned int sigs;
+	early_print("%s \n", __func__);
+	sigs |= (pp->sigs & TIOCM_RTS);
+	return sigs;
+}
+
+static void newam335x_uart_set_mctrl(struct uart_port *port, unsigned int sigs)
+{
+	struct newam335x_uart *pp = container_of(port, struct newam335x_uart, port);
+	early_print("%s \n", __func__);
+	pp->sigs = sigs;
+	if (sigs & TIOCM_RTS)
+		pp->imr |= 0;
+	else
+		pp->imr &= ~0x1;
+}
+
+static void newam335x_uart_start_tx(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_stop_tx(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_stop_rx(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_break_ctl(struct uart_port *port, int break_state)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_set_termios(struct uart_port *port,
+				    struct ktermios *termios,
+				    struct ktermios *old)
+{
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	unsigned char cval = 0;
+	unsigned long flags = 0;
+	unsigned int baud, quot;
+
+	switch (termios->c_cflag & CSIZE) {
+	case CS5:
+		cval = UART_LCR_WLEN5;
+		break;
+	case CS6:
+		cval = UART_LCR_WLEN6;
+		break;
+	case CS7:
+		cval = UART_LCR_WLEN7;
+		break;
+	default:
+	case CS8:
+		cval = UART_LCR_WLEN8;
+		break;
+	}
+
+	if (termios->c_cflag & CSTOPB)
+		cval |= UART_LCR_STOP;
+	if (termios->c_cflag & PARENB)
+		cval |= UART_LCR_PARITY;
+	if (!(termios->c_cflag & PARODD))
+		cval |= UART_LCR_EPAR;
+	if (termios->c_cflag & CMSPAR)
+		cval |= UART_LCR_SPAR;
+	early_print("%s \n", __func__);
+
+	baud = 115200;
+	/*
+	 * Update the per-port timeout.
+	 */
+	uart_update_timeout(port, termios->c_cflag, 115200);
+}
+
+static void newam335x_uart_rx_chars(struct newam335x_uart *pp)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_tx_chars(struct newam335x_uart *pp)
+{
+	early_print("%s \n", __func__);
+
+}
+
+static irqreturn_t newam335x_uart_interrupt(int irq, void *data)
+{
+	early_print("%s \n", __func__);
+
+	return IRQ_HANDLED;
+}
+
+static void newam335x_uart_timer(unsigned long data)
+{
+	early_print("%s \n", __func__);
+}
+
+static void newam335x_uart_config_port(struct uart_port *port, int flags)
+{
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	up->port.type = PORT_ALTERA_UART;
+	up->port.flags |= UPF_SOFT_FLOW | UPF_HARD_FLOW;
+	early_print("%s \n", __func__);
+}
+
+static int newam335x_uart_startup(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+	return 0;
+}
+
+static void newam335x_uart_shutdown(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+}
+
+static const char *newam335x_uart_type(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+	return "Generic UART";
+}
+
+static int newam335x_uart_request_port(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+	return 0;
+}
+
+static void newam335x_uart_release_port(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+
+}
+
+static int newam335x_uart_verify_port(struct uart_port *port,
+				   struct serial_struct *ser)
+{
+	early_print("%s \n", __func__);
+	return 0;
+}
+
+#ifdef CONFIG_CONSOLE_POLL
+static int newam335x_uart_poll_get_char(struct uart_port *port)
+{
+	early_print("%s \n", __func__);
+	return 0;
+}
+
+static void newam335x_uart_poll_put_char(struct uart_port *port, unsigned char c)
+{
+	early_print("%s \n", __func__);
+}
+#endif
+
+static struct uart_ops newam335x_uart_ops = {
+	.tx_empty	= newam335x_uart_tx_empty,
+	.get_mctrl	= newam335x_uart_get_mctrl,
+	.set_mctrl	= newam335x_uart_set_mctrl,
+	.start_tx	= newam335x_uart_start_tx,
+	.stop_tx	= newam335x_uart_stop_tx,
+	.stop_rx	= newam335x_uart_stop_rx,
+	.break_ctl	= newam335x_uart_break_ctl,
+	.startup	= newam335x_uart_startup,
+	.shutdown	= newam335x_uart_shutdown,
+	.set_termios	= newam335x_uart_set_termios,
+	.type		= newam335x_uart_type,
+	.request_port	= newam335x_uart_request_port,
+	.release_port	= newam335x_uart_release_port,
+	.config_port	= newam335x_uart_config_port,
+	.verify_port	= newam335x_uart_verify_port,
+#ifdef CONFIG_CONSOLE_POLL
+	.poll_get_char	= newam335x_uart_poll_get_char,
+	.poll_put_char	= newam335x_uart_poll_put_char,
+#endif
+};
+
+static int newam335x_uart_probe(struct platform_device *pdev)
+{
+	struct uart_port *port;
+	struct resource *res_mem;
+	struct resource *res_irq;
+
+	early_print("zz %s \n", __func__);
+
+	port = &newam335x_uart_ports.port;
+	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (res_mem)
+		port->mapbase = res_mem->start;
+
+	res_irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+	if (res_irq)
+		port->irq = res_irq->start;
+
+	port->uartclk = 115200;
+	dev_info(&pdev->dev, "IO resource:%08x \n", port->mapbase);
+	dev_info(&pdev->dev, "clk rate:%d \n", port->uartclk);
+	dev_info(&pdev->dev, "irq:%d \n", port->irq);
+	port->membase = ioremap(port->mapbase, 0x1000);
+	if (!port->membase)
+		return -ENOMEM;
+
+	port->regshift = 2;
+	port->fifosize = 64;
+	port->line = 0;
+	port->type = PORT_ALTERA_UART;
+	port->iotype = SERIAL_IO_MEM;
+	port->ops = &newam335x_uart_ops;
+	port->flags = UPF_BOOT_AUTOCONF;
+	port->dev = &pdev->dev;
+
+	platform_set_drvdata(pdev, port);
+
+	uart_add_one_port(&newam335x_uart_driver, port);
+	return 0;
+}
+
+static int newam335x_uart_remove(struct platform_device *pdev)
+{
+	early_print("zz %s \n", __func__);
+	return 0;
+}
+
+static struct platform_driver newam335x_uart_platform_driver = {
+	.probe	= newam335x_uart_probe,
+	.remove	= newam335x_uart_remove,
+	.driver	= {
+		.name		= DRV_NAME,
+	},
+};
+
+static int __init newam335x_uart_init(void)
+{
+	early_print("%s +\n", __func__);
+	uart_register_driver(&newam335x_uart_driver);
+	platform_driver_register(&newam335x_uart_platform_driver);
+	early_print("%s -\n", __func__);
+	return 0;
+}
+
+static void __exit newam335x_uart_exit(void)
+{
+	early_print("%s \n", __func__);
+	platform_driver_unregister(&newam335x_uart_platform_driver);
+}
+
+module_init(newam335x_uart_init);
+module_exit(newam335x_uart_exit);
+
+MODULE_DESCRIPTION("Altera UART driver");
+MODULE_AUTHOR("Thomas Chou <thomas@wytron.com.tw>");
+MODULE_LICENSE("GPL");
+MODULE_ALIAS("platform:" DRV_NAME);
+MODULE_ALIAS_CHARDEV_MAJOR(SERIAL_GENERIC_MAJOR);
-- 
1.9.1


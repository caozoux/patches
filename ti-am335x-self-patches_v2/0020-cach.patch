From 2802311fcc1a373a7f679a671fded594fd215784 Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Mon, 21 Aug 2017 16:53:01 +0800
Subject: [PATCH 20/34] cach

---
 drivers/net/ethernet/newam335x/ale.h               |  1 +
 drivers/net/ethernet/newam335x/newam335x_eth_ale.c | 17 ++++++
 .../net/ethernet/newam335x/newam335x_eth_cpdam.c   | 60 ++++++++++++++++++----
 .../net/ethernet/newam335x/newam335x_eth_cpdam.h   |  1 +
 .../net/ethernet/newam335x/newam335x_eth_cpsw.c    | 52 +++++++++++++++----
 .../net/ethernet/newam335x/newam335x_eth_cpsw.h    |  5 ++
 6 files changed, 118 insertions(+), 18 deletions(-)

diff --git a/drivers/net/ethernet/newam335x/ale.h b/drivers/net/ethernet/newam335x/ale.h
index e163c96..fa59945 100644
--- a/drivers/net/ethernet/newam335x/ale.h
+++ b/drivers/net/ethernet/newam335x/ale.h
@@ -33,6 +33,7 @@ enum cpsw_ale_port_state {
 void update_ale_port(struct newam335x_eth_priv *priv, int port, int val);
 int ale_init(struct newam335x_eth_priv *priv, unsigned char *addr);
 int cpsw_ale_add_mcast(struct newam335x_eth_priv *priv, const u8 *addr,int port_mask);
+void ale_dump(struct newam335x_eth_priv *priv);
 			      
 #endif
 
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_ale.c b/drivers/net/ethernet/newam335x/newam335x_eth_ale.c
index 01ceb3d..e3d8c05 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_ale.c
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_ale.c
@@ -8,6 +8,23 @@
 #define BITMASK(bits) 	((1<<bits) - 1)
 #define PKT_MAX			(1500 + 14 + 4 + 4)
 
+static int cpsw_ale_read(struct newam335x_eth_priv *priv, int idx, u32 *ale_entry);
+
+void ale_dump(struct newam335x_eth_priv *priv)
+{
+	u32 ale_entry[3];
+	int idx;
+
+	printk("control:%08x \n", readl(priv->ale_regs+CPSW_ALE_CONTROL));
+	printk("port0:%08x \n", readl(priv->ale_regs+CPSW_ALE_PORTCTL0));
+	printk("port1:%08x \n", readl(priv->ale_regs+CPSW_ALE_PORTCTL1));
+	for (idx = 0; idx < 20; idx++) {
+		cpsw_ale_read(priv, idx, ale_entry);
+		printk("zz %s ale_entry[0]:%08x ale_entry[1]:%08x ale_entry[2]:%08x \n",__func__, ale_entry[0], ale_entry[1], ale_entry[2]);
+	}
+
+}
+
 void ale_bit_set(u32 *ale_entry, int off, int bits, u32 val)
 {
 	int idx;
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.c b/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.c
index 1d5b11f..e8f2e16 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.c
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.c
@@ -38,6 +38,28 @@
 #define chan_read(chan, fld)		__raw_readl((chan)->fld)
 #define chan_read_ptr(chan, fld)	((void *)__raw_readl((chan)->fld))
 
+void loop_dealy(int ms)
+{
+	volatile u32 i, j, k;
+	for (i = 0; i < ms; i++) {
+		for (j = 0; j < 100; j++) {
+			for (k = 0; k < 3000; k++) {
+			}
+		}
+	}
+}
+
+void newam335x_cpdma_dump(struct cpdma_desc *desc)
+{
+	printk("zz %s desc:%08x \n",__func__, (int)desc);
+	printk("hw_next:%08x \n",desc_read(desc, hw_next));
+	printk("hw_buffer:%08x \n",desc_read(desc, hw_buffer));
+	printk("hw_len:%08x \n",desc_read(desc, hw_len));
+	printk("hw_mode:%08x \n",desc_read(desc, hw_mode));
+	printk("sw_buffer:%08x \n",desc_read(desc, sw_buffer));
+	printk("sw_len:%08x \n",desc_read(desc, sw_len));
+}
+
 struct transfer_data * cpdma_alloc(struct newam335x_eth_priv *priv)
 {
 #if 0
@@ -93,11 +115,13 @@ int handle_cpdma_desc(struct newam335x_eth_priv *priv, struct cpdma_chan *chan)
 	return 0;
 }
 
-int cpdma_submit(struct newam335x_eth_priv *priv, struct cpdma_chan *chan, void *buffer, int len, bool isTx)
+int cpdma_submit(struct newam335x_eth_priv *priv, void *buffer, int len, bool isTx)
 {
 	struct cpdma_desc *desc, *prev;
 	struct transfer_data *desc_data;
-	u32 mode, start;
+	struct cpdma_chan *chan;
+	dma_addr_t dma_addr;
+	u32 mode, start, ret;
 
 	desc_data = cpdma_alloc(priv);
 	if (!desc_data) {
@@ -106,14 +130,23 @@ int cpdma_submit(struct newam335x_eth_priv *priv, struct cpdma_chan *chan, void
 		return -ENOMEM;
 	}
 	
-	if (isTx)
+	if (isTx) {
 		memcpy(desc_data->buffer, buffer, len);
+		chan = &priv->tx_chan;
+	} else {
+		chan = &priv->rx_chan;
+	}
+
+	if (isTx) {
+		dma_addr = dma_map_single(&priv->pdev->dev, buffer, len, DMA_TO_DEVICE);
+		ret = dma_mapping_error(&priv->pdev->dev, dma_addr);
+	}
 
 	desc = desc_data->desc;
 
 	mode = CPDMA_DESC_OWNER | CPDMA_DESC_SOP | CPDMA_DESC_EOP;
 	desc_write(desc, hw_next,   0);
-	desc_write(desc, hw_buffer, desc_data->buffer);
+	desc_write(desc, hw_buffer, dma_addr);
 	desc_write(desc, hw_len,    len);
 	desc_write(desc, hw_mode,   mode | len);
 	desc_write(desc, sw_buffer, desc_data);
@@ -128,6 +161,7 @@ int cpdma_submit(struct newam335x_eth_priv *priv, struct cpdma_chan *chan, void
 		chan->head = desc;
 		chan->tail = desc;
 		chan_write(chan, hdp, desc);
+		printk("zz first %s %d hdp:%08x\n", __func__, __LINE__, chan->hdp);
 		goto done;
 	}
 	
@@ -141,16 +175,25 @@ int cpdma_submit(struct newam335x_eth_priv *priv, struct cpdma_chan *chan, void
 		chan_write(chan, hdp, desc);
 
 done:
+
+	if (isTx) {
+		while(1) {
+			newam335x_cpdma_dump(desc);
+			loop_dealy(1000);
+		}
+	}
 	if (chan->rxfree)
 		chan_write(chan, rxfree, 1);
 
 	return 0;
 }
+
 void newam335x_cpdam_init(struct newam335x_eth_priv *priv)
 {
 	u32 val;
 	long start;
 	int i, ret;
+	struct transfer_data *data;
 
 	memset(&priv->tx_chan, 0, sizeof(struct cpdma_chan));
 	priv->tx_chan.hdp       = priv->dma_regs + CPDMA_TXHDP_VER2;
@@ -161,9 +204,6 @@ void newam335x_cpdam_init(struct newam335x_eth_priv *priv)
 	priv->rx_chan.cp        = priv->dma_regs + CPDMA_RXCP_VER2;
 	priv->rx_chan.rxfree    = priv->dma_regs + CPDMA_RXFREE;
 
-	priv->desc		= (struct cpdma_desc*) CPPI_RAM_BASE;
-	priv->desc_free = &priv->desc[0];
-
 	__raw_writel(0, priv->dma_regs + CPDMA_TXCONTROL);
 	__raw_writel(0, priv->dma_regs + CPDMA_RXCONTROL);
 
@@ -195,14 +235,16 @@ void newam335x_cpdam_init(struct newam335x_eth_priv *priv)
 	__raw_writel(1, priv->dma_regs + CPDMA_TXCONTROL);
 	__raw_writel(1, priv->dma_regs + CPDMA_RXCONTROL);
 
+#if 0
 	/* submit rx descs */
 	for (i = 0; i < RX_PACKAGE_NUM; i++) {
-		ret = cpdma_submit(priv, &priv->rx_chan, NULL,
-				   0, 0);
+		data = &priv->package_list[i];
+		ret = cpdma_submit(priv, data->buffer, 2048, 0);
 		if (ret < 0) {
 			printk("error %d submitting rx desc\n", ret);
 			break;
 		}
 	}
+#endif
 }
 
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.h b/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.h
index 8f9ac87..b23d1b4 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.h
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpdam.h
@@ -3,5 +3,6 @@
 
 
 void newam335x_cpdam_init(struct newam335x_eth_priv *priv);
+int cpdma_submit(struct newam335x_eth_priv *priv, void *buffer, int len, bool isTx);
 #endif /* ifndef __NEWMA335X_ETH_CPDMA_H__ */
 
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
index d51f6b9..46b0cda8 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.c
@@ -28,6 +28,7 @@
 #include <linux/list.h>
 #include "newam335x_eth_cpsw.h"
 #include "newam335x_eth_cpdam.h"
+#include "newam335x_mdio.h"
 #include "ale.h"
 
 #define POLL_WEIGHT (64)
@@ -149,6 +150,7 @@ static int newam335x_eth_init(struct net_device *ndev)
 	u32 val;
 	struct newam335x_eth_priv *priv = (struct newam335x_eth_priv *) netdev_priv(ndev);
 
+	ale_dump(priv);
 	setbit_and_wait_for_clear32(&priv->ss_regs->soft_reset);
 
 	//writel(readl(&priv->ale_regs+CPSW_ALE_CONTROL) & ~(1<<2),
@@ -178,6 +180,7 @@ static int newam335x_eth_init(struct net_device *ndev)
 
 	newam335x_cpdam_init(priv);
 
+	ale_dump(priv);
 #if 0
 	newam335x_phy_init(dev);
 	phy_startup(priv->phydev);
@@ -202,7 +205,12 @@ static int cpsw_ndo_stop(struct net_device *ndev)
 static int cpsw_ndo_start_xmit (struct sk_buff *skb,
                            struct net_device *ndev)
 {
+	struct newam335x_eth_priv *priv;
+	priv = netdev_priv(ndev);
+
+	skb_tx_timestamp(skb);
 	printk("zz %s %d \n", __func__, __LINE__);
+	cpdma_submit(priv, skb->data, skb->len, 1);
     return NETDEV_TX_OK;
 }
 
@@ -291,28 +299,31 @@ static int newam335x_eth_probe(struct platform_device *pdev)
 
 	memset(priv, 0, sizeof(struct newam335x_eth_priv));
 
-	base = ioremap(res->start, res->end-res->start);
+	base = ioremap(res->start, res->end - res->start);
 	if (!base) {
 		kfree(priv);
 		return -EINVAL;
 	}
 
+	printk("zz %s base:%08x \n",__func__, base);
 #define CPSW_SL1_OFFSET 		0xd80
 #define CPSW_SL2_OFFSET 		0xdc0
 #define CPSW_PORT_OFFSET  		0x100
 #define CPSW_ALE_OFFSET   		0xd00
 #define CPSW_CPDMA_OFFSET 		0x800
+	priv->pdev = pdev;
 	priv->ss_regs = base;
-	priv->sl1_regs = (struct cpsw_sl_regs *) CPSW_SL1_OFFSET;
-	priv->sl2_regs = (struct cpsw_sl_regs *) CPSW_SL2_OFFSET;
-	priv->port0_regs =(struct cpsw_port0_regs *) CPSW_PORT_OFFSET+0x08;
-	priv->port1_regs =(struct cpsw_port1_regs *) CPSW_PORT_OFFSET+0x108;
-	priv->port2_regs =(struct cpsw_port1_regs *) CPSW_PORT_OFFSET+0x208;
-	priv->ale_regs = (void*)CPSW_ALE_OFFSET;
-	priv->dma_regs = (void*)CPSW_CPDMA_OFFSET;
+	priv->sl1_regs = (struct cpsw_sl_regs *) (base+CPSW_SL1_OFFSET);
+	priv->sl2_regs = (struct cpsw_sl_regs *) (base+CPSW_SL2_OFFSET);
+	priv->port0_regs =(struct cpsw_port0_regs *) (base+CPSW_PORT_OFFSET+0x08);
+	priv->port1_regs =(struct cpsw_port1_regs *) (base+CPSW_PORT_OFFSET+0x108);
+	priv->port2_regs =(struct cpsw_port1_regs *) (base+CPSW_PORT_OFFSET+0x208);
+	priv->mdio_regs =(struct cpsw_port1_regs *) (base+CPSW_MDIO_OFFSET);
+	priv->ale_regs = (void*) base+CPSW_ALE_OFFSET;
+	priv->dma_regs = (void*) base+CPSW_CPDMA_OFFSET;
 
 	INIT_LIST_HEAD(&priv->free_list);
-	priv->desc		= (struct cpdma_desc*) CPPI_RAM_BASE;
+	priv->desc		= (struct cpdma_desc*) (base+CPPI_RAM_OFFSET);
 	priv->desc_free = &priv->desc[0];
 
 	for (i = 0; i < PACKAGE_NUM; ++i) {
@@ -326,18 +337,41 @@ static int newam335x_eth_probe(struct platform_device *pdev)
 		list_add_tail(&priv->package_list[i].head, &priv->free_list);
 	}
 
+	ret = newam335x_mdio_init(priv);
+	if (ret) {
+		dev_err(&priv->pdev, "mdio init failed\n");
+		goto error1;
+	}
+
 	ndev->features |= NETIF_F_HW_VLAN_CTAG_FILTER;
 	ndev->netdev_ops = &newam335x_netdev_ops;
 	ndev->ethtool_ops = &newam335x_netdev_tool;
 
 	//memcpy(ndev->dev_addr, priv->defaut_mac, ETH_ALEN);
+#if 0
 	random_ether_addr(priv->defaut_mac);
+#else
+	priv->defaut_mac[0] = 0xd0;
+	priv->defaut_mac[1] = 0x39;
+	priv->defaut_mac[2] = 0x72;
+	priv->defaut_mac[3] = 0x16;
+	priv->defaut_mac[4] = 0x73;
+	priv->defaut_mac[5] = 0xfb;
+#endif
 	netif_napi_add(ndev, &priv->napi_rx, eth_rx_poll, POLL_WEIGHT);
 	netif_tx_napi_add(ndev, &priv->napi_tx, eth_tx_poll, POLL_WEIGHT);
 
 	ether_addr_copy(ndev->dev_addr, priv->defaut_mac);
+	printk("mac: %02x:%02x:%02x:%02x:%02x:%02x \n",
+		priv->defaut_mac[0],
+		priv->defaut_mac[1],
+		priv->defaut_mac[2],
+		priv->defaut_mac[3],
+		priv->defaut_mac[4],
+		priv->defaut_mac[5]);
 	/* register the network device */
 	SET_NETDEV_DEV(ndev, &pdev->dev);
+
 	ret = register_netdev(ndev);
 	if (ret) {
 		dev_err(&pdev->dev, "error registering net device\n");
diff --git a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
index 237ecd4..428f794 100644
--- a/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
+++ b/drivers/net/ethernet/newam335x/newam335x_eth_cpsw.h
@@ -128,8 +128,10 @@ struct transfer_data {
 #define PACKAGE_NUM (32)
 #define RX_PACKAGE_NUM (24)
 struct newam335x_eth_priv {
+	struct platform_device *pdev;
 	struct net_device	*ndev;
 	struct mii_dev *bus;
+	struct mii_bus *mdio_bus;
 	struct phy_device *phydev;
 	int phyaddr;
 	int phytype;
@@ -141,6 +143,7 @@ struct newam335x_eth_priv {
 	struct cpsw_port0_regs *port0_regs;
 	struct cpsw_port1_regs *port1_regs;
 	struct cpsw_port1_regs *port2_regs;
+	struct newam335x_mdio_regs *mdio_regs;
 	void *ale_regs;
 	void *dma_regs;
 	struct cpdma_desc *desc;
@@ -152,6 +155,8 @@ struct newam335x_eth_priv {
 };
 
 #define CPPI_RAM_BASE 	(0x4A102000)
+#define CPPI_RAM_OFFSET (0x2000)
+#define CPSW_MDIO_OFFSET (0x1000)
 
 /*ADDRESS LOOKUP ENGINE ID/VERSION REGISTER */
 #define CPSW_ALE_IDVER  0x0
-- 
1.9.1


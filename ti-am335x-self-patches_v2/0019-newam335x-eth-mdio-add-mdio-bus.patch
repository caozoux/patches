From 8afb0176d694e87bb76222a717ce936b8cdbdd3c Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Mon, 21 Aug 2017 16:52:39 +0800
Subject: [PATCH 19/34] newam335x:eth:mdio: add mdio bus

---
 drivers/net/ethernet/newam335x/Makefile         |   2 +-
 drivers/net/ethernet/newam335x/newam335x_mdio.c | 136 ++++++++++++++++++++++++
 drivers/net/ethernet/newam335x/newam335x_mdio.h |   8 ++
 3 files changed, 145 insertions(+), 1 deletion(-)
 create mode 100644 drivers/net/ethernet/newam335x/newam335x_mdio.c
 create mode 100644 drivers/net/ethernet/newam335x/newam335x_mdio.h

diff --git a/drivers/net/ethernet/newam335x/Makefile b/drivers/net/ethernet/newam335x/Makefile
index bf9213e..96db630 100644
--- a/drivers/net/ethernet/newam335x/Makefile
+++ b/drivers/net/ethernet/newam335x/Makefile
@@ -1,3 +1,3 @@
 obj-$(CONFIG_NEWAM335X_ETH_CPSW) := newam335x_eth_drv.o
-newam335x_eth_drv-y  := newam335x_eth_cpsw.o newam335x_eth_ale.o newam335x_eth_cpdam.o
+newam335x_eth_drv-y  := newam335x_eth_cpsw.o newam335x_eth_ale.o newam335x_eth_cpdam.o newam335x_mdio.o
 
diff --git a/drivers/net/ethernet/newam335x/newam335x_mdio.c b/drivers/net/ethernet/newam335x/newam335x_mdio.c
new file mode 100644
index 0000000..7e6de03
--- /dev/null
+++ b/drivers/net/ethernet/newam335x/newam335x_mdio.c
@@ -0,0 +1,136 @@
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/io.h>
+#include <linux/mdio.h>
+#include <linux/timer.h>
+#include <linux/delay.h>
+#include "newam335x_eth_cpsw.h"
+#include "newam335x_mdio.h"
+
+static int newam335x_mdio_read(struct mii_bus *bus, int phy_id, int phy_reg)
+{
+#define MDIO_REGADDR_MASK (0x1f<<21)
+#define MDIO_PHYADDR_MASK (0x1f<<16)
+#define MDIO_REGADDR(val) ((val&0x1f)<<21)
+#define MDIO_PHYADDR(val) ((val&0x1f)<<16)
+#define MDIO_DATA(val) ((val&0xffff))
+#define MDIO_ACTIVE (1<<29)
+#define MDIO_GO     (1<<31)
+#define MDIO_WR     (1<<30)
+
+	struct newam335x_eth_priv *priv = bus->priv;
+	struct newam335x_mdio_regs *mdio_regs = priv->mdio_regs;
+	u32 val;
+	unsigned long start;
+
+	val =readl(&mdio_regs->user[0].access);
+	val &= ~(MDIO_ACTIVE|MDIO_GO);
+	writel(val, &mdio_regs->user[0].access);
+
+	val &= ~(MDIO_PHYADDR_MASK | MDIO_REGADDR_MASK);
+	val |= (MDIO_REGADDR(phy_reg) | MDIO_PHYADDR(phy_id));
+	writel(val, &mdio_regs->user[0].access);
+	val |= MDIO_GO;
+	writel(val, &mdio_regs->user[0].access);
+	
+	val =readl(&mdio_regs->user[0].access);
+	start = jiffies + 2*HZ;
+	
+	while((val&MDIO_GO)) {
+		if (time_after(jiffies, start)) {
+			printk("zz %s phy_id:%08x phy_reg:%08x val:%08x\n",__func__, phy_id, phy_reg, readl(&mdio_regs->user[0].access));
+			printk("Error: mdio read error\n");
+			return 0;
+		}
+		val =readl(&mdio_regs->user[0].access);
+		msleep(1);
+	}
+	//printk("zz %s phy_id:%08x phy_reg:%08x val:%08x\n",__func__, phy_id, phy_reg, readl(&mdio_regs->user[0].access));
+	return MDIO_DATA(val);
+}
+
+static int newam335x_mdio_write(struct mii_bus *bus, int phy_id, int phy_reg, u16 phy_data)
+{
+	struct newam335x_eth_priv *priv = bus->priv;
+	struct newam335x_mdio_regs *mdio_regs = priv->mdio_regs;
+	unsigned long start;
+	u32 val;
+
+
+	val =readl(&mdio_regs->user[0].access);
+	val &= ~(MDIO_ACTIVE|MDIO_GO);
+	writel(val, &mdio_regs->user[0].access);
+
+	val &= ~(MDIO_PHYADDR_MASK | MDIO_REGADDR_MASK);
+	val |= (MDIO_REGADDR(phy_reg) | MDIO_PHYADDR(phy_id));
+	val |= phy_data | MDIO_WR;
+	writel(val, &mdio_regs->user[0].access);
+	val |= MDIO_GO;
+	writel(val, &mdio_regs->user[0].access);
+	
+	start = jiffies + 10*HZ;
+	val =readl(&mdio_regs->user[0].access);
+	
+	while((val&MDIO_GO)) {
+		if (time_after(jiffies, start)) {
+			printk("Error: mdio read error\n");
+			return 0;
+		}
+		val =readl(&mdio_regs->user[0].access);
+		msleep(1);
+	}
+	
+	printk("zz %s phy_id:%08x phy_reg:%08x val:%08x\n",__func__, phy_id, phy_reg, readl(&mdio_regs->user[0].access));
+	return 0;
+}
+
+static void hw_mdio_init(struct newam335x_eth_priv *priv)
+{
+#define MDIO_STATE_ENABLE 	(1<<30)
+#define MDIO_PREAMBLE  	  	(1<<20)
+	
+	struct newam335x_mdio_regs *mdio_regs;
+	u32 val;
+
+	mdio_regs = priv->mdio_regs;
+	writel(0xffffffff, &mdio_regs->alive);
+	val = readl(&mdio_regs->control);
+	val |= MDIO_STATE_ENABLE|MDIO_PREAMBLE;
+	writel(val, &mdio_regs->control);
+}
+
+int newam335x_mdio_init(struct newam335x_eth_priv *priv)
+{
+	int ret;
+
+	priv->mdio_bus = mdiobus_alloc();
+	if (priv->mdio_bus == NULL)
+		return -ENOMEM;
+
+	priv->mdio_bus->name     = "newam335x mdio bus";
+	snprintf(priv->mdio_bus->id, MII_BUS_ID_SIZE, "%s-%d",
+		priv->pdev->name, priv->pdev->id);
+	priv->mdio_bus->priv     = priv;
+	priv->mdio_bus->parent   = &priv->pdev->dev;
+	priv->mdio_bus->read     = &newam335x_mdio_read;
+	priv->mdio_bus->write    = &newam335x_mdio_write;
+	priv->mdio_bus->parent = &priv->pdev->dev;
+	priv->mdio_bus->phy_mask = ~(3);
+
+	ret = mdiobus_register(priv->mdio_bus);
+	if (ret) {
+		return -ENOENT;
+	}
+
+	return 0;
+}
+
+void newam335x_mdio_exit(struct newam335x_eth_priv *priv)
+{
+	if (priv->mdio_bus) {
+		mdiobus_unregister(priv->mdio_bus);
+		mdiobus_free(priv->mdio_bus);
+	}
+}
+
diff --git a/drivers/net/ethernet/newam335x/newam335x_mdio.h b/drivers/net/ethernet/newam335x/newam335x_mdio.h
new file mode 100644
index 0000000..e7b5d79
--- /dev/null
+++ b/drivers/net/ethernet/newam335x/newam335x_mdio.h
@@ -0,0 +1,8 @@
+#ifndef __NEW_AM335X_MDIO_H__
+#define __NEW_AM335X_MDIO_H__
+
+int newam335x_mdio_init(struct newam335x_eth_priv *priv);
+void newam335x_mdio_exit(struct newam335x_eth_priv *priv);
+
+#endif /* ifndef __NEW_AM335X_MDIO_H__ */
+
-- 
1.9.1


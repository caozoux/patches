From 4556705da0aef66b7ae545ec003d0aa8d90c89ea Mon Sep 17 00:00:00 2001
From: zou cao <cao.zou@windriver.com>
Date: Tue, 24 Oct 2017 16:39:03 +0800
Subject: [PATCH 32/34] newam335x: serial: now it is pass in am335x kernel

add serial_newam335x_irq, it will first be cuased by txempty interrupt
in serial_newam335x_start_tx.

in serial_newam335x_irq:
  it will check the irq type:
    1. UART_IIR_THRI:
       then will get the char from up->port.state->xmit, then it will
       read max data(up->port.fifosize / 4;), then send out.
    2. if it is UART_IIR_RDI:
      it will first check it is uart_handle_sysrq_char, if it is not.
      then it will put the char by uart_insert_char(&up->port, lsr,
      UART_LSR_OE, ch, flag))

normally, these ops will be called by uart_tx
	.start_tx	= newam335x_uart_start_tx,
	.stop_tx	= newam335x_uart_stop_tx,
	.stop_rx	= newam335x_uart_stop_rx,
	.break_ctl	= newam335x_uart_break_ctl,
	.startup	= newam335x_uart_startup,
first, it will call startup to enable serial, then start_tx.
after usespace free the console, it will call the shutdown

Signed-off-by: zou cao <cao.zou@windriver.com>
---
 drivers/tty/serial/newam335x_serial.c | 307 +++++++++++++++++++++++++++++-----
 1 file changed, 263 insertions(+), 44 deletions(-)

diff --git a/drivers/tty/serial/newam335x_serial.c b/drivers/tty/serial/newam335x_serial.c
index 3e3ed1c..085213c 100644
--- a/drivers/tty/serial/newam335x_serial.c
+++ b/drivers/tty/serial/newam335x_serial.c
@@ -18,9 +18,21 @@
 #include <linux/serial_core.h>
 #include <linux/platform_data/serial-omap.h>
 #include <asm/setup.h>
+#include <linux/of_irq.h>
 
 #define DRV_NAME "newam335x_uart"
 
+#define UART_OMAP_SCR		0x10	/* Supplementary control register */
+
+/* SCR register bitmasks */
+#define OMAP_UART_SCR_RX_TRIG_GRANU1_MASK		(1 << 7)
+#define OMAP_UART_SCR_TX_TRIG_GRANU1_MASK		(1 << 6)
+#define OMAP_UART_SCR_TX_EMPTY			(1 << 3)
+
+#define OMAP_UART_FCR_RX_FIFO_TRIG_MASK			(0x3 << 6)
+#define OMAP_UART_FCR_TX_FIFO_TRIG_MASK			(0x3 << 4)
+#define OMAP_UART_TCR_TRIG	0x0F
+
 #define SERIAL_GENERIC_MAJOR 204
 #define SERIAL_GENERIC_MINOR 213
 /*
@@ -31,12 +43,40 @@ struct newam335x_uart {
 	struct timer_list tmr;
 	unsigned int sigs;	/* Local copy of line sigs */
 	unsigned short imr;	/* Local IMR mirror */
+
+	unsigned char		ier;
+	unsigned char		lcr;
+	unsigned char		mcr;
+	unsigned char		fcr;
+	unsigned char		efr;
+	unsigned char		dll;
+	unsigned char		dlh;
+	unsigned char		mdr1;
+	unsigned char		scr;
+	unsigned char		wer;
 };
 
 static struct newam335x_uart newam335x_uart_ports;
 static struct uart_driver newam335x_uart_driver;
 static struct console newam335x_uart_console;
 
+void dump_mem(void *addr, int len)
+{
+	int i, l;
+	int *buf = (int*)addr;
+	for (i = 0; i < len/4; i = i+16) {
+		printk("%08x: ", i*4);
+		for (l = 0;  l < 16; ++l) {
+			if ((i+l)>= len) {
+				printk("\n");
+				return;
+			}
+			printk("%08x ",buf[i+l]);
+		}
+		printk("\n");
+	}
+}
+
 static inline unsigned int serial_in(struct newam335x_uart *up, int offset)
 {
 	offset <<= up->port.regshift;
@@ -49,14 +89,14 @@ static inline void serial_out(struct newam335x_uart *up, int offset, int value)
 	writew(value, up->port.membase + offset);
 }
 
-
 void low_newam335x_uart_putchar(struct newam335x_uart *up, u8 ch)
 {
-       while ((serial_in(up, UART_LSR) & UART_LSR_THRE) == 0)
+      while ((serial_in(up, UART_LSR) & UART_LSR_THRE) == 0)
                ;
 	  while(1)
        serial_out(up, UART_TX, 'a');
 }
+
 #define BOTH_EMPTY (UART_LSR_TEMT | UART_LSR_THRE)
 static inline void wait_for_xmitr(struct newam335x_uart *up)
 {
@@ -89,6 +129,14 @@ static inline void wait_for_xmitr(struct newam335x_uart *up)
 #endif
 }
 
+static inline void serial_newam335x_clear_fifos(struct newam335x_uart *up)
+{
+	serial_out(up, UART_FCR, UART_FCR_ENABLE_FIFO);
+	serial_out(up, UART_FCR, UART_FCR_ENABLE_FIFO |
+		       UART_FCR_CLEAR_RCVR | UART_FCR_CLEAR_XMIT);
+	serial_out(up, UART_FCR, 0);
+}
+
 void serial_newam335x_console_putchar(struct uart_port *port, int ch)
 {
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
@@ -115,7 +163,6 @@ static int __init newam335x_uart_console_setup(struct console *co, char *options
 	int bits = 8;
 	int parity = 'n';
 	int flow = 'n';
-	early_print("%s \n", __func__, &newam335x_uart_ports);
 	uart_parse_options(options, &baud, &parity, &bits, &flow);
 	return uart_set_options(&newam335x_uart_ports.port, co, baud, parity, bits, flow);
 }
@@ -142,7 +189,6 @@ static int __init newam335x_uart_console_setup(struct console *co, char *options
 
 static int __init newam335x_uart_console_init(void)
 {
-	early_print("zz %s \n", __func__);
 	register_console(&newam335x_uart_console);
 	return 0;
 }
@@ -150,48 +196,91 @@ static int __init newam335x_uart_console_init(void)
 
 static unsigned int newam335x_uart_tx_empty(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
-	return 0;
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	unsigned int ret = 0;
+	unsigned long flags = 0;
+
+	spin_lock_irqsave(&up->port.lock, flags);
+	ret = serial_in(up, UART_LSR) & UART_LSR_TEMT ? TIOCSER_TEMT : 0;
+	spin_unlock_irqrestore(&up->port.lock, flags);
+	return ret;
 }
 
 static unsigned int newam335x_uart_get_mctrl(struct uart_port *port)
 {
 	struct newam335x_uart *pp = container_of(port, struct newam335x_uart, port);
 	unsigned int sigs;
-	early_print("%s \n", __func__);
 	sigs |= (pp->sigs & TIOCM_RTS);
 	return sigs;
 }
 
-static void newam335x_uart_set_mctrl(struct uart_port *port, unsigned int sigs)
+static void newam335x_uart_set_mctrl(struct uart_port *port, unsigned int mctrl)
 {
-	struct newam335x_uart *pp = container_of(port, struct newam335x_uart, port);
-	early_print("%s \n", __func__);
-	pp->sigs = sigs;
-	if (sigs & TIOCM_RTS)
-		pp->imr |= 0;
-	else
-		pp->imr &= ~0x1;
+	struct newam335x_uart *up  = container_of(port, struct newam335x_uart, port);
+	unsigned char mcr = 0, old_mcr, lcr;
+
+	if (mctrl & TIOCM_RTS)
+		mcr |= UART_MCR_RTS;
+	if (mctrl & TIOCM_DTR)
+		mcr |= UART_MCR_DTR;
+	if (mctrl & TIOCM_OUT1)
+		mcr |= UART_MCR_OUT1;
+	if (mctrl & TIOCM_OUT2)
+		mcr |= UART_MCR_OUT2;
+	if (mctrl & TIOCM_LOOP)
+		mcr |= UART_MCR_LOOP;
+
+	old_mcr = serial_in(up, UART_MCR);
+	old_mcr &= ~(UART_MCR_LOOP | UART_MCR_OUT2 | UART_MCR_OUT1 |
+		     UART_MCR_DTR | UART_MCR_RTS);
+	up->mcr = old_mcr | mcr;
+	up->mcr |=  0x80;
+
+	serial_out(up, UART_MCR, up->mcr);
 }
 
 static void newam335x_uart_start_tx(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	u32 val, iir;
+
+	iir = serial_in(up, UART_IIR);
+	val =  serial_in(up, UART_IER);
+	val |= UART_IER_THRI;
+	serial_out(up, UART_IER, val);
+		
+	iir = serial_in(up, UART_IIR);
 }
 
 static void newam335x_uart_stop_tx(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	u32 val, iir;
+
+	iir = serial_in(up, UART_IIR);
+	val =  serial_in(up, UART_IER);
+	val |= UART_IER_THRI;
+	val &= ~UART_IER_THRI;
+	serial_out(up, UART_IER, val);
+		
+	iir = serial_in(up, UART_IIR);
 }
 
 static void newam335x_uart_stop_rx(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	u32 val, iir;
+
+	iir = serial_in(up, UART_IIR);
+	val =  serial_in(up, UART_IER);
+	val &= ~(UART_IER_RLSI | UART_IER_RDI);
+	serial_out(up, UART_IER, val);
+		
+	iir = serial_in(up, UART_IIR);
 }
 
 static void newam335x_uart_break_ctl(struct uart_port *port, int break_state)
 {
-	early_print("%s \n", __func__);
 }
 
 static void newam335x_uart_set_termios(struct uart_port *port,
@@ -227,7 +316,6 @@ static void newam335x_uart_set_termios(struct uart_port *port,
 		cval |= UART_LCR_EPAR;
 	if (termios->c_cflag & CMSPAR)
 		cval |= UART_LCR_SPAR;
-	early_print("%s \n", __func__);
 
 	baud = 115200;
 	/*
@@ -238,25 +326,15 @@ static void newam335x_uart_set_termios(struct uart_port *port,
 
 static void newam335x_uart_rx_chars(struct newam335x_uart *pp)
 {
-	early_print("%s \n", __func__);
 }
 
 static void newam335x_uart_tx_chars(struct newam335x_uart *pp)
 {
-	early_print("%s \n", __func__);
 
 }
 
-static irqreturn_t newam335x_uart_interrupt(int irq, void *data)
-{
-	early_print("%s \n", __func__);
-
-	return IRQ_HANDLED;
-}
-
 static void newam335x_uart_timer(unsigned long data)
 {
-	early_print("%s \n", __func__);
 }
 
 static void newam335x_uart_config_port(struct uart_port *port, int flags)
@@ -264,55 +342,182 @@ static void newam335x_uart_config_port(struct uart_port *port, int flags)
 	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
 	up->port.type = PORT_ALTERA_UART;
 	up->port.flags |= UPF_SOFT_FLOW | UPF_HARD_FLOW;
-	early_print("%s \n", __func__);
+}
+
+static void transmit_chars(struct newam335x_uart *up, unsigned int lsr)
+{
+	struct circ_buf *xmit = &up->port.state->xmit;
+	int count;
+
+	if (up->port.x_char) {
+		serial_out(up, UART_TX, up->port.x_char);
+		up->port.icount.tx++;
+		up->port.x_char = 0;
+		return;
+	}
+	
+	if (uart_circ_empty(xmit) || uart_tx_stopped(&up->port)) {
+		newam335x_uart_stop_tx(&up->port);
+		return;
+	}
+	
+	count = up->port.fifosize / 4;
+	do {
+		serial_out(up, UART_TX, xmit->buf[xmit->tail]);
+		xmit->tail = (xmit->tail + 1) & (UART_XMIT_SIZE - 1);
+		up->port.icount.tx++;
+		if (uart_circ_empty(xmit))
+			break;
+	} while (--count > 0);
+
+	if (uart_circ_empty(xmit))
+		newam335x_uart_stop_tx(&up->port);
+}
+
+static void serial_newam335x_rxchar(struct newam335x_uart *up, unsigned int lsr)
+{
+	unsigned char ch = 0;
+	unsigned int flag;
+
+	if (!(lsr & UART_LSR_DR))
+		return;
+
+	ch = serial_in(up, UART_RX);
+	flag = TTY_NORMAL;
+	up->port.icount.rx++;
+
+	if (uart_handle_sysrq_char(&up->port, ch))
+		return;
+
+	uart_insert_char(&up->port, lsr, UART_LSR_OE, ch, flag);
+}
+
+static void serial_newam335x_rlxchar(struct newam335x_uart *up, unsigned int lsr)
+{
+	unsigned int flag;
+	unsigned char ch = 0;
+
+	if (likely(lsr & UART_LSR_DR))
+		ch = serial_in(up, UART_RX);
+
+	up->port.icount.rx++;
+	flag = TTY_NORMAL;
+}
+
+static irqreturn_t serial_newam335x_irq(int irq, void *dev_id)
+{
+	struct newam335x_uart *up = (struct newam335x_uart*)dev_id;
+	int iir, lsr;
+	unsigned int type;
+	unsigned int flags;
+	int max_count = 256;
+
+	//spin_lock(&up->port.lock);
+	//spin_lock_irqsave(&up->port.lock, &flags);
+	spin_lock_irqsave(&up->port.lock, flags);
+
+	do {
+		iir = serial_in(up, UART_IIR);
+		//printk("zz %s iir:%08x 1\n",__func__, (int)iir);
+		if (iir & UART_IIR_NO_INT)
+			break;
+
+		lsr = serial_in(up, UART_LSR);
+
+		type = iir & 0x3e;
+		switch (type) {
+			case UART_IIR_THRI:
+				transmit_chars(up, lsr);
+				break;
+			case UART_IIR_RDI:
+				serial_newam335x_rxchar(up, lsr);
+				break;
+			case UART_IIR_RLSI:
+				serial_newam335x_rlxchar(up, lsr);
+				break;
+			default:
+				printk("zz %s %d iir:%08x lsr:%08x fcr:%08x\n", __func__, __LINE__, iir, lsr, serial_in(up, UART_FCR));
+				//dump_mem(up->port.membase, 0x90);
+				//while(1);
+				break;
+		}
+	} while (!(iir & UART_IIR_NO_INT) && max_count--);
+	//spin_unlock(&up->port.lock);
+	spin_unlock_irqrestore(&up->port.lock, flags);
+
+	tty_flip_buffer_push(&up->port.state->port);
+
+	return IRQ_HANDLED;
 }
 
 static int newam335x_uart_startup(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+	int irq;
+	int retval, iir;
+	int val;
+
+	retval = request_irq(port->irq, serial_newam335x_irq, up->port.irqflags,
+				"newam335x-serial", up);
+	if (retval) {
+		printk("register errord \n");
+		return retval;
+	}
+
+	(void) serial_in(up, UART_MSR);
+
+	up->lcr = UART_LCR_EPAR	| UART_LCR_WLEN8;
+	serial_out(up, UART_LCR, up->lcr);
+	up->ier = UART_IER_RLSI | UART_IER_RDI;
+	serial_out(up, UART_IER, up->ier);
+		
+	//up->scr = serial_in(up, UART_OMAP_SCR);
+	up->scr = OMAP_UART_SCR_RX_TRIG_GRANU1_MASK;
+	serial_out(up, UART_OMAP_SCR, up->scr);
 	return 0;
 }
 
 static void newam335x_uart_shutdown(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
+	struct newam335x_uart *up = container_of(port, struct newam335x_uart, port);
+
+	printk("zz %s %d \n", __func__, __LINE__);
+	/*
+	 * Disable interrupts from this port
+	 */
+	serial_out(up, UART_IER, 0);
+	free_irq(up->port.irq, up);
 }
 
 static const char *newam335x_uart_type(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
 	return "Generic UART";
 }
 
 static int newam335x_uart_request_port(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
 	return 0;
 }
 
 static void newam335x_uart_release_port(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
 
 }
 
 static int newam335x_uart_verify_port(struct uart_port *port,
 				   struct serial_struct *ser)
 {
-	early_print("%s \n", __func__);
 	return 0;
 }
 
 #ifdef CONFIG_CONSOLE_POLL
 static int newam335x_uart_poll_get_char(struct uart_port *port)
 {
-	early_print("%s \n", __func__);
 	return 0;
 }
 
 static void newam335x_uart_poll_put_char(struct uart_port *port, unsigned char c)
 {
-	early_print("%s \n", __func__);
 }
 #endif
 
@@ -343,17 +548,24 @@ static int newam335x_uart_probe(struct platform_device *pdev)
 	struct uart_port *port;
 	struct resource *res_mem;
 	struct resource *res_irq;
+	int uartirq = 0;
 
-	early_print("zz %s \n", __func__);
 
 	port = &newam335x_uart_ports.port;
 	res_mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (res_mem)
 		port->mapbase = res_mem->start;
 
+#if defined(CONFIG_OF)
+	uartirq = irq_of_parse_and_map(pdev->dev.of_node, 0);
+	if (!uartirq)
+		return -EPROBE_DEFER;
+	port->irq = uartirq;
+#else
 	res_irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
 	if (res_irq)
 		port->irq = res_irq->start;
+#endif
 
 	port->uartclk = 115200;
 	dev_info(&pdev->dev, "IO resource:%08x \n", port->mapbase);
@@ -380,30 +592,37 @@ static int newam335x_uart_probe(struct platform_device *pdev)
 
 static int newam335x_uart_remove(struct platform_device *pdev)
 {
-	early_print("zz %s \n", __func__);
 	return 0;
 }
 
+#if defined(CONFIG_OF)
+static const struct of_device_id omap_serial_of_match[] = {
+	{ .compatible = "ti,omap2-uart" },
+	{ .compatible = "ti,omap3-uart" },
+	{ .compatible = "ti,omap4-uart" },
+	{},
+};
+MODULE_DEVICE_TABLE(of, omap_serial_of_match);
+#endif
+
 static struct platform_driver newam335x_uart_platform_driver = {
 	.probe	= newam335x_uart_probe,
 	.remove	= newam335x_uart_remove,
 	.driver	= {
 		.name		= DRV_NAME,
+		.of_match_table = of_match_ptr(omap_serial_of_match),
 	},
 };
 
 static int __init newam335x_uart_init(void)
 {
-	early_print("%s +\n", __func__);
 	uart_register_driver(&newam335x_uart_driver);
 	platform_driver_register(&newam335x_uart_platform_driver);
-	early_print("%s -\n", __func__);
 	return 0;
 }
 
 static void __exit newam335x_uart_exit(void)
 {
-	early_print("%s \n", __func__);
 	platform_driver_unregister(&newam335x_uart_platform_driver);
 }
 
-- 
1.9.1


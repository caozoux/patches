From ca106b20861be1e2c214b0ef703b178adc0fdfec Mon Sep 17 00:00:00 2001
From: czou <cao.zou@windriver.com>
Date: Tue, 23 Aug 2016 17:24:49 +0800
Subject: [PATCH] debug: usb enum new device debug

Signed-off-by: czou <cao.zou@windriver.com>
---
 drivers/usb/core/hub.c     |   1 +
 drivers/usb/core/message.c | 124 ++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 124 insertions(+), 1 deletion(-)

diff --git a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
index e56ad83..8092661 100644
--- a/drivers/usb/core/hub.c
+++ b/drivers/usb/core/hub.c
@@ -4368,6 +4368,7 @@ hub_port_init (struct usb_hub *hub, struct usb_device *udev, int port1,
 			 */
 			for (j = 0; j < 3; ++j) {
 				buf->bMaxPacketSize0 = 0;
+				printk("zz %s ---> try to:get usb descriptor\n", __func__);
 				r = usb_control_msg(udev, usb_rcvaddr0pipe(),
 					USB_REQ_GET_DESCRIPTOR, USB_DIR_IN,
 					USB_DT_DEVICE << 8, 0,
diff --git a/drivers/usb/core/message.c b/drivers/usb/core/message.c
index f368d20..a3c6615 100644
--- a/drivers/usb/core/message.c
+++ b/drivers/usb/core/message.c
@@ -58,7 +58,7 @@ static int usb_start_wait_urb(struct urb *urb, int timeout, int *actual_length)
 		usb_kill_urb(urb);
 		retval = (ctx.status == -ENOENT ? -ETIMEDOUT : ctx.status);
 
-		dev_dbg(&urb->dev->dev,
+		dev_info(&urb->dev->dev,
 			"%s timed out on ep%d%s len=%u/%u\n",
 			current->comm,
 			usb_endpoint_num(&urb->ep->desc),
@@ -71,6 +71,15 @@ out:
 	if (actual_length)
 		*actual_length = urb->actual_length;
 
+	if (actual_length) {
+		int i;
+		int off = 0;
+		for (i=0; i<*actual_length; i++) {
+			printk("%02x%s", ((char*)urb->transfer_buffer)[i], (((i+1)%8)==0)?"\n":" ");
+		}
+		printk("\nurb actual_length:%d\n", *actual_length);
+	}
+
 	usb_free_urb(urb);
 	return retval;
 }
@@ -100,6 +109,116 @@ static int usb_internal_control_msg(struct usb_device *usb_dev,
 		return length;
 }
 
+void usb_descriptor_ascyn(struct usb_ctrlrequest *dr)
+{
+	char s_requesttype[64];
+	u32 type;
+#if 0
+	dr->bRequestType = requesttype;
+	dr->bRequest = request;
+	dr->wValue = cpu_to_le16(value);
+	dr->wIndex = cpu_to_le16(index);
+	dr->wLength = cpu_to_le16(size);
+#endif
+	
+	//decode requesttype
+	printk("%s", (dr->bRequestType & (1<<7)) ?"DH-":"HD-");
+	type=(dr->bRequestType&(3<<5))>>5;
+	switch (type) {
+		case 0:
+			printk("STD-");
+			break;
+		case 1:
+			printk("CLS-");
+			break;
+		case 3:
+			printk("VEN-");
+			break;
+		default:
+			printk("REV-");
+			break;
+	}
+
+	type=(dr->bRequestType&0x1f);
+
+	switch (type) {
+		case 0:
+			printk("device");
+			break;
+		case 1:
+			printk("interface");
+			break;
+		case 3:
+			printk("endpoint");
+			break;
+		default:
+			printk("other");
+			break;
+	}
+	printk(" ");
+	switch (dr->bRequest) {
+		case USB_REQ_GET_STATUS:
+			printk("USB_REQ_GET_STATUS");
+			break;
+		case USB_REQ_CLEAR_FEATURE: 
+			printk("USB_REQ_CLEAR_FEATURE");
+			break;
+		case USB_REQ_SET_FEATURE:
+			printk("USB_REQ_SET_FEATURE");
+			break;
+		case USB_REQ_SET_ADDRESS:
+			printk("USB_REQ_SET_ADDRESS******************************************************");
+			break;
+		case USB_REQ_GET_DESCRIPTOR:
+			printk("USB_REQ_GET_DESCRIPTOR");
+			switch((dr->wValue >>8)& 0x0f) {
+				case USB_DT_DEVICE:
+					printk(" USB_DT_DEVICE");
+					break;
+				case USB_DT_CONFIG:
+					printk(" USB_DT_CONFIG");
+					break;
+				case USB_DT_STRING:
+					printk(" USB_DT_STRING");
+					break;
+				case USB_DT_INTERFACE:
+					printk(" USB_DT_INTERFACE");
+					break;
+				case USB_DT_ENDPOINT:
+					printk(" USB_DT_ENDPOINT");
+					break;
+				case USB_DT_DEVICE_QUALIFIER:
+					printk(" USB_DT_DEVICE_QUALIFIER");
+					break;
+				case USB_DT_OTHER_SPEED_CONFIG:
+					printk(" USB_DT_OTHER_SPEED_CONFIG");
+					break;
+				case USB_DT_INTERFACE_POWER:
+					printk(" USB_DT_INTERFACE_POWER");
+					break;
+			}
+			break;
+		case USB_REQ_SET_DESCRIPTOR:
+			printk("USB_REQ_SET_DESCRIPTOR");
+			break;
+		case USB_REQ_GET_CONFIGURATION:
+			printk("USB_REQ_GET_CONFIGURATION");
+			break;
+		case USB_REQ_SET_CONFIGURATION:
+			printk("USB_REQ_SET_CONFIGURATION");
+			break;
+		case USB_REQ_GET_INTERFACE:
+			printk("USB_REQ_GET_INTERFACE");
+			break;
+		case USB_REQ_SET_INTERFACE:
+			printk("USB_REQ_SET_INTERFACE");
+			break;
+		default:
+			break;
+	}
+
+	printk("\n");
+}
 /**
  * usb_control_msg - Builds a control urb, sends it off and waits for completion
  * @dev: pointer to the usb device to send the message to
@@ -139,12 +258,15 @@ int usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request,
 	if (!dr)
 		return -ENOMEM;
 
+
 	dr->bRequestType = requesttype;
 	dr->bRequest = request;
 	dr->wValue = cpu_to_le16(value);
 	dr->wIndex = cpu_to_le16(index);
 	dr->wLength = cpu_to_le16(size);
+	dev_info(&dev->dev, " dr->bRequestType:%08x  dr->bRequest:%08x  dr->wValue:%08x  dr->wIndex:%08x  dr->wLength:%08x \n"  ,(u32)dr->bRequestType  ,(u32)dr->bRequest  ,(u32)dr->wValue  ,(u32)dr->wIndex  ,(u32)dr->wLength);
 
+	usb_descriptor_ascyn(dr);
 	ret = usb_internal_control_msg(dev, pipe, dr, data, size, timeout);
 
 	kfree(dr);
-- 
1.9.1


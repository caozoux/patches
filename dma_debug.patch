diff --git a/arch/arm/common/Makefile b/arch/arm/common/Makefile
index 4bdc416..a109d07 100644
--- a/arch/arm/common/Makefile
+++ b/arch/arm/common/Makefile
@@ -2,6 +2,7 @@
 # Makefile for the linux kernel.
 #
 
+ccflags-y := -DDEBUG
 obj-y				+= firmware.o
 
 obj-$(CONFIG_ICST)		+= icst.o
diff --git a/arch/arm/common/edma.c b/arch/arm/common/edma.c
index 0eb9df8..ae202c6 100644
--- a/arch/arm/common/edma.c
+++ b/arch/arm/common/edma.c
@@ -584,6 +584,7 @@ static int prepare_unused_channel_list(struct device *dev, void *data)
 				of_node_put(dma_spec.np);
 				continue;
 			}
+			printk("zz %s channel:%d\n", __func__, dma_spec.args[0]);
 
 			clear_bit(EDMA_CHAN_SLOT(dma_spec.args[0]),
 				  edma_cc[0]->edma_unused);
@@ -648,6 +649,7 @@ int edma_alloc_channel(int channel,
 {
 	unsigned i, done = 0, ctlr = 0;
 	int ret = 0;
+	printk("zz %s channel:%d\n", __func__, channel);
 
 	if (!unused_chan_list_done) {
 		/*
@@ -730,6 +732,7 @@ void edma_free_channel(unsigned channel)
 {
 	unsigned ctlr;
 
+	printk("zz %s channel:%d\n", __func__, channel);
 	ctlr = EDMA_CTLR(channel);
 	channel = EDMA_CHAN_SLOT(channel);
 
@@ -936,6 +939,7 @@ void edma_set_src(unsigned slot, dma_addr_t src_port,
 {
 	unsigned ctlr;
 
+	printk("zz %s\n", __func__);
 	ctlr = EDMA_CTLR(slot);
 	slot = EDMA_CHAN_SLOT(slot);
 
@@ -977,6 +981,7 @@ void edma_set_dest(unsigned slot, dma_addr_t dest_port,
 	ctlr = EDMA_CTLR(slot);
 	slot = EDMA_CHAN_SLOT(slot);
 
+	printk("zz %s\n", __func__);
 	if (slot < edma_cc[ctlr]->num_slots) {
 		unsigned int i = edma_parm_read(ctlr, PARM_OPT, slot);
 
@@ -1054,6 +1059,7 @@ void edma_set_dest_index(unsigned slot, s16 dest_bidx, s16 dest_cidx)
 {
 	unsigned ctlr;
 
+	printk("zz %s\n", __func__);
 	ctlr = EDMA_CTLR(slot);
 	slot = EDMA_CHAN_SLOT(slot);
 
@@ -1100,6 +1106,7 @@ void edma_set_transfer_params(unsigned slot,
 		u16 bcnt_rld, enum sync_dimension sync_mode)
 {
 	unsigned ctlr;
+	printk("zz %s\n", __func__);
 
 	ctlr = EDMA_CTLR(slot);
 	slot = EDMA_CHAN_SLOT(slot);
@@ -1181,6 +1188,7 @@ void edma_write_slot(unsigned slot, const struct edmacc_param *param)
 {
 	unsigned ctlr;
 
+	printk("zz %s\n", __func__);
 	ctlr = EDMA_CTLR(slot);
 	slot = EDMA_CHAN_SLOT(slot);
 
@@ -1294,18 +1302,25 @@ int edma_start(unsigned channel)
 
 	ctlr = EDMA_CTLR(channel);
 	channel = EDMA_CHAN_SLOT(channel);
+	//printk("zz %s\n", __func__);
 
 	if (channel < edma_cc[ctlr]->num_channels) {
 		int j = channel >> 5;
 		unsigned int mask = BIT(channel & 0x1f);
 
 		/* EDMA channels without event association */
+		
 		if (test_bit(channel, edma_cc[ctlr]->edma_unused)) {
 			pr_debug("EDMA: ESR%d %08x\n", j,
 				edma_shadow0_read_array(ctlr, SH_ESR, j));
 			edma_shadow0_write_array(ctlr, SH_ESR, j, mask);
 			return 0;
+		} else {
+			printk("zz %s force test edma\n", __func__);
+			edma_shadow0_write_array(ctlr, SH_ESR, j, mask);
+			return 0;
 		}
+	printk("zz %s unused:%llx\n", __func__, edma_cc[ctlr]->edma_unused);
 
 		/* EDMA channel with event association */
 		pr_debug("EDMA: ER%d %08x\n", j,
diff --git a/drivers/dma/Makefile b/drivers/dma/Makefile
index d84190e..3bb4680 100644
--- a/drivers/dma/Makefile
+++ b/drivers/dma/Makefile
@@ -1,5 +1,7 @@
-ccflags-$(CONFIG_DMADEVICES_DEBUG)  := -DDEBUG
-ccflags-$(CONFIG_DMADEVICES_VDEBUG) += -DVERBOSE_DEBUG
+#ccflags-$(CONFIG_DMADEVICES_DEBUG)  := -DDEBUG
+#ccflags-$(CONFIG_DMADEVICES_VDEBUG) += -DVERBOSE_DEBUG
+ccflags-y := -DDEBUG
+ccflags-y += -DVERBOSE_DEBUG
 
 obj-$(CONFIG_DMA_ENGINE) += dmaengine.o
 obj-$(CONFIG_DMA_VIRTUAL_CHANNELS) += virt-dma.o
diff --git a/drivers/dma/dmaengine.c b/drivers/dma/dmaengine.c
index a4068e2..1a730c4 100644
--- a/drivers/dma/dmaengine.c
+++ b/drivers/dma/dmaengine.c
@@ -494,13 +494,15 @@ static struct dma_chan *private_candidate(const dma_cap_mask_t *mask,
 
 	list_for_each_entry(chan, &dev->channels, device_node) {
 		if (chan->client_count) {
-			pr_debug("%s: %s busy\n",
+			/*pr_debug("%s: %s busy\n",
 				 __func__, dma_chan_name(chan));
+				 */
 			continue;
 		}
 		if (fn && !fn(chan, fn_param)) {
-			pr_debug("%s: %s filter said false\n",
+		/*	pr_debug("%s: %s filter said false\n",
 				 __func__, dma_chan_name(chan));
+				 */
 			continue;
 		}
 		return chan;
diff --git a/drivers/dma/edma.c b/drivers/dma/edma.c
index 59d80f8..d6ee9bf 100644
--- a/drivers/dma/edma.c
+++ b/drivers/dma/edma.c
@@ -902,6 +902,7 @@ static u32 edma_residue(struct edma_desc *edesc)
 	dma_addr_t done, pos;
 	int i;
 
+	printk("zz %s edesc:%p echan:%p\n", __func__,edesc, edesc->echan);
 	/*
 	 * We always read the dst/src position from the first RamPar
 	 * pset. That's the one which is active now.
diff --git a/drivers/tty/serial/8250/8250_omap.c b/drivers/tty/serial/8250/8250_omap.c
index 1681875..a37812f 100644
--- a/drivers/tty/serial/8250/8250_omap.c
+++ b/drivers/tty/serial/8250/8250_omap.c
@@ -1050,7 +1050,8 @@ static int omap8250_probe(struct platform_device *pdev)
 	pm_runtime_get_sync(&pdev->dev);
 
 	omap_serial_fill_features_erratas(&up, priv);
-#ifdef CONFIG_SERIAL_8250_DMA
+//#ifdef CONFIG_SERIAL_8250_DMA
+#if 0
 	if (pdev->dev.of_node) {
 		/*
 		 * Oh DMA support. If there are no DMA properties in the DT then
@@ -1081,6 +1082,9 @@ static int omap8250_probe(struct platform_device *pdev)
 		dev_err(&pdev->dev, "unable to register 8250 port\n");
 		goto err;
 	}
+	printk("zz %s\n", __func__);
+
+
 	priv->line = ret;
 	platform_set_drvdata(pdev, priv);
 	pm_runtime_mark_last_busy(&pdev->dev);
diff --git a/drivers/tty/serial/omap-serial.c b/drivers/tty/serial/omap-serial.c
index 28ded94..08408b6 100644
--- a/drivers/tty/serial/omap-serial.c
+++ b/drivers/tty/serial/omap-serial.c
@@ -163,6 +163,10 @@ struct uart_omap_port {
 	u8			wakeups_enabled;
 	u32			features;
 
+	int			DTR_gpio;
+	int			DTR_inverted;
+	int			DTR_active;
+
 	struct serial_rs485	rs485;
 	int			rts_gpio;
 
@@ -180,6 +184,8 @@ static struct uart_omap_port *ui[OMAP_MAX_HSUART_PORTS];
 /* Forward declaration of functions */
 static void serial_omap_mdr1_errataset(struct uart_omap_port *up, u8 mdr1);
 
+static struct workqueue_struct *serial_omap_uart_wq;
+
 static inline unsigned int serial_in(struct uart_omap_port *up, int offset)
 {
 	offset <<= up->port.regshift;
@@ -254,11 +260,8 @@ serial_omap_baud_is_mode16(struct uart_port *port, unsigned int baud)
 {
 	unsigned int n13 = port->uartclk / (13 * baud);
 	unsigned int n16 = port->uartclk / (16 * baud);
-	int baudAbsDiff13 =
-		n13 ? (baud - (port->uartclk / (13 * n13))) : INT_MAX;
-	int baudAbsDiff16 =
-		n16 ? (baud - (port->uartclk / (16 * n16))) : INT_MAX;
-
+	int baudAbsDiff13 = baud - (port->uartclk / (13 * n13));
+	int baudAbsDiff16 = baud - (port->uartclk / (16 * n16));
 	if (baudAbsDiff13 < 0)
 		baudAbsDiff13 = -baudAbsDiff13;
 	if (baudAbsDiff16 < 0)
@@ -388,8 +391,11 @@ static void transmit_chars(struct uart_omap_port *up, unsigned int lsr)
 			break;
 	} while (--count > 0);
 
-	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS)
+	if (uart_circ_chars_pending(xmit) < WAKEUP_CHARS) {
+		spin_unlock(&up->port.lock);
 		uart_write_wakeup(&up->port);
+		spin_lock(&up->port.lock);
+	}
 
 	if (uart_circ_empty(xmit))
 		serial_omap_stop_tx(&up->port);
@@ -550,10 +556,6 @@ static void serial_omap_rdi(struct uart_omap_port *up, unsigned int lsr)
 	flag = TTY_NORMAL;
 	up->port.icount.rx++;
 
-#ifdef CONFIG_CONSOLE_POLL
-	if (up->port.poll_rx_cb && up->port.poll_rx_cb(ch))
-		return;
-#endif
 	if (uart_handle_sysrq_char(&up->port, ch))
 		return;
 
@@ -688,6 +690,16 @@ static void serial_omap_set_mctrl(struct uart_port *port, unsigned int mctrl)
 	serial_out(up, UART_MCR, up->mcr);
 	pm_runtime_mark_last_busy(up->dev);
 	pm_runtime_put_autosuspend(up->dev);
+
+	if (gpio_is_valid(up->DTR_gpio) &&
+	    !!(mctrl & TIOCM_DTR) != up->DTR_active) {
+		up->DTR_active = !up->DTR_active;
+		if (gpio_cansleep(up->DTR_gpio))
+			schedule_work(&up->qos_work);
+		else
+			gpio_set_value(up->DTR_gpio,
+				       up->DTR_active != up->DTR_inverted);
+	}
 }
 
 static void serial_omap_break_ctl(struct uart_port *port, int break_state)
@@ -831,6 +843,9 @@ static void serial_omap_uart_qos_work(struct work_struct *work)
 						qos_work);
 
 	pm_qos_update_request(&up->pm_qos_request, up->latency);
+	if (gpio_is_valid(up->DTR_gpio))
+		gpio_set_value_cansleep(up->DTR_gpio,
+					up->DTR_active != up->DTR_inverted);
 }
 
 static void
@@ -1256,10 +1271,13 @@ serial_omap_console_write(struct console *co, const char *s,
 
 	pm_runtime_get_sync(up->dev);
 
-	if (up->port.sysrq || oops_in_progress)
-		locked = spin_trylock_irqsave(&up->port.lock, flags);
+	local_irq_save(flags);
+	if (up->port.sysrq)
+		locked = 0;
+	else if (oops_in_progress)
+		locked = spin_trylock(&up->port.lock);
 	else
-		spin_lock_irqsave(&up->port.lock, flags);
+		spin_lock(&up->port.lock);
 
 	/*
 	 * First save the IER then disable the interrupts
@@ -1288,7 +1306,8 @@ serial_omap_console_write(struct console *co, const char *s,
 	pm_runtime_mark_last_busy(up->dev);
 	pm_runtime_put_autosuspend(up->dev);
 	if (locked)
-		spin_unlock_irqrestore(&up->port.lock, flags);
+		spin_unlock(&up->port.lock);
+	local_irq_restore(flags);
 }
 
 static int __init
@@ -1394,7 +1413,7 @@ serial_omap_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
 
 	switch (cmd) {
 	case TIOCSRS485:
-		if (copy_from_user(&rs485conf, (void __user *) arg,
+		if (copy_from_user(&rs485conf, (struct serial_rs485 *) arg,
 					sizeof(rs485conf)))
 			return -EFAULT;
 
@@ -1402,7 +1421,7 @@ serial_omap_ioctl(struct uart_port *port, unsigned int cmd, unsigned long arg)
 		break;
 
 	case TIOCGRS485:
-		if (copy_to_user((void __user *) arg,
+		if (copy_to_user((struct serial_rs485 *) arg,
 					&(to_uart_omap_port(port)->rs485),
 					sizeof(rs485conf)))
 			return -EFAULT;
@@ -1474,9 +1493,6 @@ static int serial_omap_suspend(struct device *dev)
 	uart_suspend_port(&serial_omap_reg, &up->port);
 	flush_work(&up->qos_work);
 
-	/* Select sleep pin state */
-	pinctrl_pm_select_sleep_state(dev);
-
 	if (device_may_wakeup(dev))
 		serial_omap_enable_wakeup(up, true);
 	else
@@ -1489,9 +1505,6 @@ static int serial_omap_resume(struct device *dev)
 {
 	struct uart_omap_port *up = dev_get_drvdata(dev);
 
-	/* Select default pin state */
-	pinctrl_pm_select_default_state(dev);
-
 	if (device_may_wakeup(dev))
 		serial_omap_enable_wakeup(up, false);
 
@@ -1594,7 +1607,7 @@ static int serial_omap_probe_rs485(struct uart_omap_port *up,
 	/* check for tx enable gpio */
 	up->rts_gpio = of_get_named_gpio_flags(np, "rts-gpio", 0, &flags);
 	if (gpio_is_valid(up->rts_gpio)) {
-		ret = devm_gpio_request(up->dev, up->rts_gpio, "omap-serial");
+		ret = gpio_request(up->rts_gpio, "omap-serial");
 		if (ret < 0)
 			return ret;
 		ret = gpio_direction_output(up->rts_gpio,
@@ -1624,16 +1637,10 @@ static int serial_omap_probe_rs485(struct uart_omap_port *up,
 
 static int serial_omap_probe(struct platform_device *pdev)
 {
+	struct uart_omap_port	*up;
+	struct resource		*mem, *irq;
 	struct omap_uart_port_info *omap_up_info = dev_get_platdata(&pdev->dev);
-	struct uart_omap_port *up;
-	struct resource *mem;
-	void __iomem *base;
-	int uartirq = 0;
-	int wakeirq = 0;
-	int ret;
-	enum of_gpio_flags flags;
-	int gpio_sel;
-	unsigned long gpio_flags;
+	int ret, uartirq = 0, wakeirq = 0;
 
 	/* The optional wakeirq may be specified in the board dts file */
 	if (pdev->dev.of_node) {
@@ -1644,37 +1651,48 @@ static int serial_omap_probe(struct platform_device *pdev)
 		omap_up_info = of_get_uart_port_info(&pdev->dev);
 		pdev->dev.platform_data = omap_up_info;
 	} else {
-		uartirq = platform_get_irq(pdev, 0);
-		if (uartirq < 0)
-			return -EPROBE_DEFER;
+		irq = platform_get_resource(pdev, IORESOURCE_IRQ, 0);
+		if (!irq) {
+			dev_err(&pdev->dev, "no irq resource?\n");
+			return -ENODEV;
+		}
+		uartirq = irq->start;
 	}
 
-	/* Check if the UART needs to be selected */
-	gpio_sel = of_get_gpio_flags(pdev->dev.of_node, 0, &flags);
-	if (gpio_is_valid(gpio_sel)) {
-		dev_dbg(&pdev->dev, "using gpio %d for uart%d_sel\n",
-			gpio_sel, pdev->id);
-		gpio_flags = (flags & OF_GPIO_ACTIVE_LOW) ?
-			GPIOF_OUT_INIT_LOW : GPIOF_OUT_INIT_HIGH;
-		ret = devm_gpio_request_one(&pdev->dev, gpio_sel,
-					    gpio_flags, "uart_sel");
-		if (ret) {
-			dev_err(&pdev->dev, "gpio%d request failed, ret %d\n",
-				gpio_sel, ret);
+	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!mem) {
+		dev_err(&pdev->dev, "no mem resource?\n");
+		return -ENODEV;
+	}
+
+	if (!devm_request_mem_region(&pdev->dev, mem->start, resource_size(mem),
+				pdev->dev.driver->name)) {
+		dev_err(&pdev->dev, "memory region already claimed\n");
+		return -EBUSY;
+	}
+
+	if (gpio_is_valid(omap_up_info->DTR_gpio) &&
+	    omap_up_info->DTR_present) {
+		ret = gpio_request(omap_up_info->DTR_gpio, "omap-serial");
+		if (ret < 0)
+			return ret;
+		ret = gpio_direction_output(omap_up_info->DTR_gpio,
+					    omap_up_info->DTR_inverted);
+		if (ret < 0)
 			return ret;
-		}
-	} else if (gpio_sel == -EPROBE_DEFER) {
-		return -EPROBE_DEFER;
 	}
 
 	up = devm_kzalloc(&pdev->dev, sizeof(*up), GFP_KERNEL);
 	if (!up)
 		return -ENOMEM;
 
-	mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	base = devm_ioremap_resource(&pdev->dev, mem);
-	if (IS_ERR(base))
-		return PTR_ERR(base);
+	if (gpio_is_valid(omap_up_info->DTR_gpio) &&
+	    omap_up_info->DTR_present) {
+		up->DTR_gpio = omap_up_info->DTR_gpio;
+		up->DTR_inverted = omap_up_info->DTR_inverted;
+	} else
+		up->DTR_gpio = -EINVAL;
+	up->DTR_active = 0;
 
 	up->dev = &pdev->dev;
 	up->port.dev = &pdev->dev;
@@ -1708,7 +1726,14 @@ static int serial_omap_probe(struct platform_device *pdev)
 
 	sprintf(up->name, "OMAP UART%d", up->port.line);
 	up->port.mapbase = mem->start;
-	up->port.membase = base;
+	up->port.membase = devm_ioremap(&pdev->dev, mem->start,
+						resource_size(mem));
+	if (!up->port.membase) {
+		dev_err(&pdev->dev, "can't ioremap UART\n");
+		ret = -ENOMEM;
+		goto err_ioremap;
+	}
+
 	up->port.flags = omap_up_info->flags;
 	up->port.uartclk = omap_up_info->uartclk;
 	if (!up->port.uartclk) {
@@ -1722,12 +1747,12 @@ static int serial_omap_probe(struct platform_device *pdev)
 	up->calc_latency = PM_QOS_CPU_DMA_LAT_DEFAULT_VALUE;
 	pm_qos_add_request(&up->pm_qos_request,
 		PM_QOS_CPU_DMA_LATENCY, up->latency);
+	serial_omap_uart_wq = create_singlethread_workqueue(up->name);
 	INIT_WORK(&up->qos_work, serial_omap_uart_qos_work);
 
 	platform_set_drvdata(pdev, up);
 	if (omap_up_info->autosuspend_timeout == 0)
 		omap_up_info->autosuspend_timeout = -1;
-
 	device_init_wakeup(up->dev, true);
 	pm_runtime_use_autosuspend(&pdev->dev);
 	pm_runtime_set_autosuspend_delay(&pdev->dev,
@@ -1754,6 +1779,7 @@ static int serial_omap_probe(struct platform_device *pdev)
 err_add_port:
 	pm_runtime_put(&pdev->dev);
 	pm_runtime_disable(&pdev->dev);
+err_ioremap:
 err_rs485:
 err_port_line:
 	dev_err(&pdev->dev, "[UART%d]: failure [%s]: %d\n",
@@ -1898,7 +1924,7 @@ static const struct dev_pm_ops serial_omap_dev_pm_ops = {
 #if defined(CONFIG_OF)
 static const struct of_device_id omap_serial_of_match[] = {
 	{ .compatible = "ti,omap2-uart" },
-	{ .compatible = "ti,omap3-uart" },
+	{ .compatible = "ti,omap3-uart0" },
 	{ .compatible = "ti,omap4-uart" },
 	{},
 };
